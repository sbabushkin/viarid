# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ApplicationStatusReturnType {
  isDevelopment: Boolean
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

input CheckRecoveryHashInput {
  email: String!
  requestId: String!
}

type Comment implements Node {
  """Reads and enables pagination through a set of `File`."""
  attachments(
    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [File]

  """Reads and enables pagination through a set of `File`."""
  attachmentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FilesConnection!

  """Reads a single `User` that is related to this `Comment`."""
  author: User
  authorId: UUID!
  body: String

  """Reads and enables pagination through a set of `Comment`."""
  childComments(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
  ): [Comment!]!

  """Reads and enables pagination through a set of `Comment`."""
  childCommentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsConnection!

  """Reads and enables pagination through a set of `CommentAttachment`."""
  commentAttachments(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CommentAttachment`."""
    orderBy: [CommentAttachmentsOrderBy!]
  ): [CommentAttachment!]!

  """Reads and enables pagination through a set of `CommentAttachment`."""
  commentAttachmentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CommentAttachment`."""
    orderBy: [CommentAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentAttachmentsConnection!
  created: Datetime!
  entityId: UUID!
  entityType: String!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Comment` that is related to this `Comment`."""
  parent: Comment
  parentId: UUID
  updated: Datetime!
}

type CommentAggregates {
  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: CommentDistinctCountAggregates
  keys: [String!]
}

"""A filter to be used against aggregates of `Comment` object types."""
input CommentAggregatesFilter {
  """Distinct count aggregate over matching `Comment` objects."""
  distinctCount: CommentDistinctCountAggregateFilter

  """
  A filter that must pass for the relevant `Comment` object to be included within the aggregate.
  """
  filter: CommentFilter
}

type CommentAttachment implements Node {
  """Reads a single `Comment` that is related to this `CommentAttachment`."""
  comment: Comment
  commentId: UUID

  """Reads a single `File` that is related to this `CommentAttachment`."""
  file: File
  fileId: UUID
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type CommentAttachmentAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: CommentAttachmentAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: CommentAttachmentDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: CommentAttachmentMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: CommentAttachmentMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: CommentAttachmentStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: CommentAttachmentStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: CommentAttachmentSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: CommentAttachmentVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: CommentAttachmentVarianceSampleAggregates
}

"""
A filter to be used against aggregates of `CommentAttachment` object types.
"""
input CommentAttachmentAggregatesFilter {
  """Mean average aggregate over matching `CommentAttachment` objects."""
  average: CommentAttachmentAverageAggregateFilter

  """Distinct count aggregate over matching `CommentAttachment` objects."""
  distinctCount: CommentAttachmentDistinctCountAggregateFilter

  """
  A filter that must pass for the relevant `CommentAttachment` object to be included within the aggregate.
  """
  filter: CommentAttachmentFilter

  """Maximum aggregate over matching `CommentAttachment` objects."""
  max: CommentAttachmentMaxAggregateFilter

  """Minimum aggregate over matching `CommentAttachment` objects."""
  min: CommentAttachmentMinAggregateFilter

  """
  Population standard deviation aggregate over matching `CommentAttachment` objects.
  """
  stddevPopulation: CommentAttachmentStddevPopulationAggregateFilter

  """
  Sample standard deviation aggregate over matching `CommentAttachment` objects.
  """
  stddevSample: CommentAttachmentStddevSampleAggregateFilter

  """Sum aggregate over matching `CommentAttachment` objects."""
  sum: CommentAttachmentSumAggregateFilter

  """
  Population variance aggregate over matching `CommentAttachment` objects.
  """
  variancePopulation: CommentAttachmentVariancePopulationAggregateFilter

  """Sample variance aggregate over matching `CommentAttachment` objects."""
  varianceSample: CommentAttachmentVarianceSampleAggregateFilter
}

input CommentAttachmentAverageAggregateFilter {
  id: BigFloatFilter
}

type CommentAttachmentAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat
}

"""
A condition to be used against `CommentAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CommentAttachmentCondition {
  """Checks for equality with the object’s `commentId` field."""
  commentId: UUID

  """Checks for equality with the object’s `fileId` field."""
  fileId: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int
}

input CommentAttachmentDistinctCountAggregateFilter {
  commentId: BigIntFilter
  fileId: BigIntFilter
  id: BigIntFilter
}

type CommentAttachmentDistinctCountAggregates {
  """Distinct count of commentId across the matching connection"""
  commentId: BigInt

  """Distinct count of fileId across the matching connection"""
  fileId: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt
}

"""
A filter to be used against `CommentAttachment` object types. All fields are combined with a logical ‘and.’
"""
input CommentAttachmentFilter {
  """Checks for all expressions in this list."""
  and: [CommentAttachmentFilter!]

  """Filter by the object’s `comment` relation."""
  comment: CommentFilter

  """A related `comment` exists."""
  commentExists: Boolean

  """Filter by the object’s `commentId` field."""
  commentId: UUIDFilter

  """Filter by the object’s `file` relation."""
  file: FileFilter

  """A related `file` exists."""
  fileExists: Boolean

  """Filter by the object’s `fileId` field."""
  fileId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: CommentAttachmentFilter

  """Checks for any expressions in this list."""
  or: [CommentAttachmentFilter!]
}

"""Grouping methods for `CommentAttachment` for usage during aggregation."""
enum CommentAttachmentGroupBy {
  COMMENT_ID
  FILE_ID
}

input CommentAttachmentHavingAverageInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingDistinctCountInput {
  id: HavingIntFilter
}

"""Conditions for `CommentAttachment` aggregates."""
input CommentAttachmentHavingInput {
  AND: [CommentAttachmentHavingInput!]
  OR: [CommentAttachmentHavingInput!]
  average: CommentAttachmentHavingAverageInput
  distinctCount: CommentAttachmentHavingDistinctCountInput
  max: CommentAttachmentHavingMaxInput
  min: CommentAttachmentHavingMinInput
  stddevPopulation: CommentAttachmentHavingStddevPopulationInput
  stddevSample: CommentAttachmentHavingStddevSampleInput
  sum: CommentAttachmentHavingSumInput
  variancePopulation: CommentAttachmentHavingVariancePopulationInput
  varianceSample: CommentAttachmentHavingVarianceSampleInput
}

input CommentAttachmentHavingMaxInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingMinInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingStddevPopulationInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingStddevSampleInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingSumInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingVariancePopulationInput {
  id: HavingIntFilter
}

input CommentAttachmentHavingVarianceSampleInput {
  id: HavingIntFilter
}

input CommentAttachmentMaxAggregateFilter {
  id: IntFilter
}

type CommentAttachmentMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int
}

input CommentAttachmentMinAggregateFilter {
  id: IntFilter
}

type CommentAttachmentMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int
}

input CommentAttachmentStddevPopulationAggregateFilter {
  id: BigFloatFilter
}

type CommentAttachmentStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat
}

input CommentAttachmentStddevSampleAggregateFilter {
  id: BigFloatFilter
}

type CommentAttachmentStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat
}

input CommentAttachmentSumAggregateFilter {
  id: BigIntFilter
}

type CommentAttachmentSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!
}

input CommentAttachmentVariancePopulationAggregateFilter {
  id: BigFloatFilter
}

type CommentAttachmentVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat
}

input CommentAttachmentVarianceSampleAggregateFilter {
  id: BigFloatFilter
}

type CommentAttachmentVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat
}

"""A connection to a list of `CommentAttachment` values."""
type CommentAttachmentsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: CommentAttachmentAggregates

  """
  A list of edges which contains the `CommentAttachment` and cursor to aid in pagination.
  """
  edges: [CommentAttachmentsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `CommentAttachment` for these aggregates.
    """
    groupBy: [CommentAttachmentGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: CommentAttachmentHavingInput
  ): [CommentAttachmentAggregates!]

  """A list of `CommentAttachment` objects."""
  nodes: [CommentAttachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CommentAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CommentAttachment` edge in the connection."""
type CommentAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CommentAttachment` at the end of the edge."""
  node: CommentAttachment
}

"""Methods to use when ordering `CommentAttachment`."""
enum CommentAttachmentsOrderBy {
  COMMENT_ID_ASC
  COMMENT_ID_DESC
  FILE_ID_ASC
  FILE_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Comment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CommentCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `entityId` field."""
  entityId: UUID

  """Checks for equality with the object’s `entityType` field."""
  entityType: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `parentId` field."""
  parentId: UUID

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
}

input CommentDistinctCountAggregateFilter {
  authorId: BigIntFilter
  body: BigIntFilter
  created: BigIntFilter
  entityId: BigIntFilter
  entityType: BigIntFilter
  id: BigIntFilter
  parentId: BigIntFilter
  updated: BigIntFilter
}

type CommentDistinctCountAggregates {
  """Distinct count of authorId across the matching connection"""
  authorId: BigInt

  """Distinct count of body across the matching connection"""
  body: BigInt

  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of entityId across the matching connection"""
  entityId: BigInt

  """Distinct count of entityType across the matching connection"""
  entityType: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of parentId across the matching connection"""
  parentId: BigInt

  """Distinct count of updated across the matching connection"""
  updated: BigInt
}

enum CommentEntityTypeEnum {
  executor
  skill
  task
  workTemplate
}

"""
A filter to be used against `Comment` object types. All fields are combined with a logical ‘and.’
"""
input CommentFilter {
  """Checks for all expressions in this list."""
  and: [CommentFilter!]

  """Filter by the object’s `author` relation."""
  author: UserFilter

  """Filter by the object’s `authorId` field."""
  authorId: UUIDFilter

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `childCommentsConnection` relation."""
  childCommentsConnection: CommentToManyCommentFilter

  """Some related `childCommentsConnection` exist."""
  childCommentsConnectionExist: Boolean

  """Filter by the object’s `commentAttachmentsConnection` relation."""
  commentAttachmentsConnection: CommentToManyCommentAttachmentFilter

  """Some related `commentAttachmentsConnection` exist."""
  commentAttachmentsConnectionExist: Boolean

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `entityId` field."""
  entityId: UUIDFilter

  """Filter by the object’s `entityType` field."""
  entityType: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: CommentFilter

  """Checks for any expressions in this list."""
  or: [CommentFilter!]

  """Filter by the object’s `parent` relation."""
  parent: CommentFilter

  """A related `parent` exists."""
  parentExists: Boolean

  """Filter by the object’s `parentId` field."""
  parentId: UUIDFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter
}

"""Grouping methods for `Comment` for usage during aggregation."""
enum CommentGroupBy {
  AUTHOR_ID
  BODY
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  ENTITY_ID
  ENTITY_TYPE
  PARENT_ID
  UPDATED
  UPDATED_TRUNCATED_TO_DAY
  UPDATED_TRUNCATED_TO_HOUR
}

input CommentHavingAverageInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingDistinctCountInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

"""Conditions for `Comment` aggregates."""
input CommentHavingInput {
  AND: [CommentHavingInput!]
  OR: [CommentHavingInput!]
  average: CommentHavingAverageInput
  distinctCount: CommentHavingDistinctCountInput
  max: CommentHavingMaxInput
  min: CommentHavingMinInput
  stddevPopulation: CommentHavingStddevPopulationInput
  stddevSample: CommentHavingStddevSampleInput
  sum: CommentHavingSumInput
  variancePopulation: CommentHavingVariancePopulationInput
  varianceSample: CommentHavingVarianceSampleInput
}

input CommentHavingMaxInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingMinInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingStddevPopulationInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingStddevSampleInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingSumInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingVariancePopulationInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input CommentHavingVarianceSampleInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

"""
A filter to be used against many `CommentAttachment` object types. All fields are combined with a logical ‘and.’
"""
input CommentToManyCommentAttachmentFilter {
  """
  Aggregates across related `CommentAttachment` match the filter criteria.
  """
  aggregates: CommentAttachmentAggregatesFilter

  """
  Every related `CommentAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommentAttachmentFilter

  """
  No related `CommentAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommentAttachmentFilter

  """
  Some related `CommentAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommentAttachmentFilter
}

"""
A filter to be used against many `Comment` object types. All fields are combined with a logical ‘and.’
"""
input CommentToManyCommentFilter {
  """Aggregates across related `Comment` match the filter criteria."""
  aggregates: CommentAggregatesFilter

  """
  Every related `Comment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommentFilter

  """
  No related `Comment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommentFilter

  """
  Some related `Comment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommentFilter
}

"""A connection to a list of `Comment` values."""
type CommentsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: CommentAggregates

  """
  A list of edges which contains the `Comment` and cursor to aid in pagination.
  """
  edges: [CommentsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Comment` for these aggregates."""
    groupBy: [CommentGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: CommentHavingInput
  ): [CommentAggregates!]

  """A list of `Comment` objects."""
  nodes: [Comment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection."""
type CommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Comment` at the end of the edge."""
  node: Comment
}

"""Methods to use when ordering `Comment`."""
enum CommentsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BODY_ASC
  BODY_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_BODY_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_BODY_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_ID_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_ID_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_AVERAGE_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_AVERAGE_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_COUNT_ASC
  CHILD_COMMENTS_CONNECTION_COUNT_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_BODY_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_BODY_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_ID_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_ID_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_DISTINCT_COUNT_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_MAX_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_MAX_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_MAX_BODY_ASC
  CHILD_COMMENTS_CONNECTION_MAX_BODY_DESC
  CHILD_COMMENTS_CONNECTION_MAX_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_MAX_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_MAX_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_MAX_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_MAX_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_MAX_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_MAX_ID_ASC
  CHILD_COMMENTS_CONNECTION_MAX_ID_DESC
  CHILD_COMMENTS_CONNECTION_MAX_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_MAX_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_MAX_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_MAX_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_MIN_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_MIN_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_MIN_BODY_ASC
  CHILD_COMMENTS_CONNECTION_MIN_BODY_DESC
  CHILD_COMMENTS_CONNECTION_MIN_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_MIN_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_MIN_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_MIN_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_MIN_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_MIN_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_MIN_ID_ASC
  CHILD_COMMENTS_CONNECTION_MIN_ID_DESC
  CHILD_COMMENTS_CONNECTION_MIN_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_MIN_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_MIN_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_MIN_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_BODY_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_BODY_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_POPULATION_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_BODY_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_BODY_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_STDDEV_SAMPLE_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_SUM_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_SUM_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_SUM_BODY_ASC
  CHILD_COMMENTS_CONNECTION_SUM_BODY_DESC
  CHILD_COMMENTS_CONNECTION_SUM_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_SUM_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_SUM_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_SUM_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_SUM_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_SUM_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_SUM_ID_ASC
  CHILD_COMMENTS_CONNECTION_SUM_ID_DESC
  CHILD_COMMENTS_CONNECTION_SUM_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_SUM_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_SUM_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_SUM_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_BODY_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_BODY_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_POPULATION_UPDATED_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_AUTHOR_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_AUTHOR_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_BODY_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_BODY_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_CREATED_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_CREATED_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_TYPE_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_TYPE_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_PARENT_ID_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_PARENT_ID_DESC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_UPDATED_ASC
  CHILD_COMMENTS_CONNECTION_VARIANCE_SAMPLE_UPDATED_DESC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_COUNT_ASC
  COMMENT_ATTACHMENTS_CONNECTION_COUNT_DESC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  CREATED_ASC
  CREATED_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  ENTITY_TYPE_ASC
  ENTITY_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_ASC
  UPDATED_DESC
}

"""All input for the `countBusinessDays` mutation."""
input CountBusinessDaysInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fromDate: Date
  toDate: Date
}

"""The output of our `countBusinessDays` mutation."""
type CountBusinessDaysPayload {
  bigInt: BigInt

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

input CreateCommentInput {
  attachmentIds: [String!]
  body: String!
  entityId: String!
  entityType: CommentEntityTypeEnum!
  parentId: String
}

input CreateDocumentInput {
  description: String!
  documentTemplateId: String!
  fileId: String!
  name: String!
  projectId: String!
}

input CreateDocumentTemplateInput {
  description: String!
  documentTypeId: String!
  fileId: String!
  name: String!
}

input CreateDocumentTypeInput {
  """The name of the context in which certain entities are accessed"""
  context: DocumentContextEntityTypeEnum!

  """Description of this type of document"""
  description: String!

  """The name of this type of document"""
  name: String!
}

input CreateUserInput {
  comment: String
  email: String!
  firstName: String!
  gender: UserGenderEnum
  lastName: String!
  login: String
  middleName: String
  phone: String!
  roleIds: [Int!]!
  telegramId: String
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

type Document {
  authorId: String!
  created: String!
  description: String!
  documentTemplateId: String!
  fileId: String!
  id: String!
  name: String!
  updated: String!
}

enum DocumentContextEntityTypeEnum {
  ks2
  managerialExecution
}

type DocumentTemplate {
  authorId: String!
  created: String!
  description: String!
  documentType: DocumentType!
  documentTypeId: String!
  fileId: String!
  id: String!
  name: String!
  updated: String!
}

type DocumentType {
  context: DocumentContextEntityTypeEnum!
  created: String!
  description: String!
  id: String!
  name: String!
  updated: String!
}

type Event {
  aggregateId: String
  created: String!
  entityId: String
  id: String!
  type: String!
  userId: String
}

type File implements Node {
  """Reads and enables pagination through a set of `CommentAttachment`."""
  commentAttachments(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CommentAttachment`."""
    orderBy: [CommentAttachmentsOrderBy!]
  ): [CommentAttachment!]!

  """Reads and enables pagination through a set of `CommentAttachment`."""
  commentAttachmentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CommentAttachment`."""
    orderBy: [CommentAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentAttachmentsConnection!
  created: Datetime!
  id: UUID!
  mimetype: String
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  previewId: UUID
  updated: Datetime!
  url: String
}

type FileAggregates {
  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: FileDistinctCountAggregates
  keys: [String!]
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `mimetype` field."""
  mimetype: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `previewId` field."""
  previewId: UUID

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
}

type FileDistinctCountAggregates {
  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of mimetype across the matching connection"""
  mimetype: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt

  """Distinct count of previewId across the matching connection"""
  previewId: BigInt

  """Distinct count of updated across the matching connection"""
  updated: BigInt

  """Distinct count of this field across the matching connection."""
  url: BigInt
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Filter by the object’s `commentAttachmentsConnection` relation."""
  commentAttachmentsConnection: FileToManyCommentAttachmentFilter

  """Some related `commentAttachmentsConnection` exist."""
  commentAttachmentsConnectionExist: Boolean

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `mimetype` field."""
  mimetype: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FileFilter

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Filter by the object’s `previewId` field."""
  previewId: UUIDFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""Grouping methods for `File` for usage during aggregation."""
enum FileGroupBy {
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  MIMETYPE
  NAME
  PREVIEW_ID
  UPDATED
  UPDATED_TRUNCATED_TO_DAY
  UPDATED_TRUNCATED_TO_HOUR
}

input FileHavingAverageInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingDistinctCountInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

"""Conditions for `File` aggregates."""
input FileHavingInput {
  AND: [FileHavingInput!]
  OR: [FileHavingInput!]
  average: FileHavingAverageInput
  distinctCount: FileHavingDistinctCountInput
  max: FileHavingMaxInput
  min: FileHavingMinInput
  stddevPopulation: FileHavingStddevPopulationInput
  stddevSample: FileHavingStddevSampleInput
  sum: FileHavingSumInput
  variancePopulation: FileHavingVariancePopulationInput
  varianceSample: FileHavingVarianceSampleInput
}

input FileHavingMaxInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingMinInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingStddevPopulationInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingStddevSampleInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingSumInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingVariancePopulationInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input FileHavingVarianceSampleInput {
  created: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

"""
A filter to be used against many `CommentAttachment` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyCommentAttachmentFilter {
  """
  Aggregates across related `CommentAttachment` match the filter criteria.
  """
  aggregates: CommentAttachmentAggregatesFilter

  """
  Every related `CommentAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommentAttachmentFilter

  """
  No related `CommentAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommentAttachmentFilter

  """
  Some related `CommentAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommentAttachmentFilter
}

type FileType {
  created: String!
  id: String!
  mimetype: String!
  name: String!
  updated: String!
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: FileAggregates

  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `File` for these aggregates."""
    groupBy: [FileGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: FileHavingInput
  ): [FileAggregates!]

  """A list of `File` objects."""
  nodes: [File]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_AVERAGE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_COUNT_ASC
  COMMENT_ATTACHMENTS_CONNECTION_COUNT_DESC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_DISTINCT_COUNT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MAX_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_MIN_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_POPULATION_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_SUM_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_COMMENT_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_COMMENT_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_FILE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_FILE_ID_DESC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  COMMENT_ATTACHMENTS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  CREATED_ASC
  CREATED_DESC
  ID_ASC
  ID_DESC
  MIMETYPE_ASC
  MIMETYPE_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PREVIEW_ID_ASC
  PREVIEW_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_ASC
  UPDATED_DESC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value."""
  equalTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float

  """Included in the specified list."""
  in: [Float!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """Not included in the specified list."""
  notIn: [Float!]
}

type FsmTransition {
  from: String!
  fsmId: String!
  id: String!
  requiredFields: [String!]!
  to: String!
}

input GetEventsInput {
  entityId: String!

  """Events types to query"""
  eventsTypes: [String!]

  """Events records limit"""
  limit: Int

  """Events records offset"""
  offset: Int
}

input GetPermissionsByUserRolesInput {
  roleIds: [Int!]!
}

input HavingBigfloatFilter {
  equalTo: BigFloat
  greaterThan: BigFloat
  greaterThanOrEqualTo: BigFloat
  lessThan: BigFloat
  lessThanOrEqualTo: BigFloat
  notEqualTo: BigFloat
}

input HavingDatetimeFilter {
  equalTo: Datetime
  greaterThan: Datetime
  greaterThanOrEqualTo: Datetime
  lessThan: Datetime
  lessThanOrEqualTo: Datetime
  notEqualTo: Datetime
}

input HavingFloatFilter {
  equalTo: Float
  greaterThan: Float
  greaterThanOrEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  notEqualTo: Float
}

input HavingIntFilter {
  equalTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  notEqualTo: Int
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

type KnexMigration implements Node {
  batch: Int
  id: Int!
  migrationTime: Datetime
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type KnexMigrationAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: KnexMigrationAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: KnexMigrationDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: KnexMigrationMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: KnexMigrationMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: KnexMigrationStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: KnexMigrationStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: KnexMigrationSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: KnexMigrationVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: KnexMigrationVarianceSampleAggregates
}

type KnexMigrationAverageAggregates {
  """Mean average of batch across the matching connection"""
  batch: BigFloat

  """Mean average of id across the matching connection"""
  id: BigFloat
}

"""
A condition to be used against `KnexMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationCondition {
  """Checks for equality with the object’s `batch` field."""
  batch: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `migrationTime` field."""
  migrationTime: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String
}

type KnexMigrationDistinctCountAggregates {
  """Distinct count of batch across the matching connection"""
  batch: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of migrationTime across the matching connection"""
  migrationTime: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt
}

"""
A filter to be used against `KnexMigration` object types. All fields are combined with a logical ‘and.’
"""
input KnexMigrationFilter {
  """Checks for all expressions in this list."""
  and: [KnexMigrationFilter!]

  """Filter by the object’s `batch` field."""
  batch: IntFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `migrationTime` field."""
  migrationTime: DatetimeFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: KnexMigrationFilter

  """Checks for any expressions in this list."""
  or: [KnexMigrationFilter!]
}

type KnexMigrationMaxAggregates {
  """Maximum of batch across the matching connection"""
  batch: Int

  """Maximum of id across the matching connection"""
  id: Int
}

type KnexMigrationMinAggregates {
  """Minimum of batch across the matching connection"""
  batch: Int

  """Minimum of id across the matching connection"""
  id: Int
}

type KnexMigrationStddevPopulationAggregates {
  """Population standard deviation of batch across the matching connection"""
  batch: BigFloat

  """Population standard deviation of id across the matching connection"""
  id: BigFloat
}

type KnexMigrationStddevSampleAggregates {
  """Sample standard deviation of batch across the matching connection"""
  batch: BigFloat

  """Sample standard deviation of id across the matching connection"""
  id: BigFloat
}

type KnexMigrationSumAggregates {
  """Sum of batch across the matching connection"""
  batch: BigInt!

  """Sum of id across the matching connection"""
  id: BigInt!
}

type KnexMigrationVariancePopulationAggregates {
  """Population variance of batch across the matching connection"""
  batch: BigFloat

  """Population variance of id across the matching connection"""
  id: BigFloat
}

type KnexMigrationVarianceSampleAggregates {
  """Sample variance of batch across the matching connection"""
  batch: BigFloat

  """Sample variance of id across the matching connection"""
  id: BigFloat
}

"""A connection to a list of `KnexMigration` values."""
type KnexMigrationsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: KnexMigrationAggregates

  """
  A list of edges which contains the `KnexMigration` and cursor to aid in pagination.
  """
  edges: [KnexMigrationsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `KnexMigration` for these aggregates."""
    groupBy: [KnexMigrationsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: KnexMigrationsHavingInput
  ): [KnexMigrationAggregates!]

  """A list of `KnexMigration` objects."""
  nodes: [KnexMigration]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `KnexMigration` you could get from the connection."""
  totalCount: Int!
}

"""A `KnexMigration` edge in the connection."""
type KnexMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KnexMigration` at the end of the edge."""
  node: KnexMigration
}

"""Grouping methods for `KnexMigration` for usage during aggregation."""
enum KnexMigrationsGroupBy {
  BATCH
  MIGRATION_TIME
  MIGRATION_TIME_TRUNCATED_TO_DAY
  MIGRATION_TIME_TRUNCATED_TO_HOUR
  NAME
}

input KnexMigrationsHavingAverageInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingDistinctCountInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

"""Conditions for `KnexMigration` aggregates."""
input KnexMigrationsHavingInput {
  AND: [KnexMigrationsHavingInput!]
  OR: [KnexMigrationsHavingInput!]
  average: KnexMigrationsHavingAverageInput
  distinctCount: KnexMigrationsHavingDistinctCountInput
  max: KnexMigrationsHavingMaxInput
  min: KnexMigrationsHavingMinInput
  stddevPopulation: KnexMigrationsHavingStddevPopulationInput
  stddevSample: KnexMigrationsHavingStddevSampleInput
  sum: KnexMigrationsHavingSumInput
  variancePopulation: KnexMigrationsHavingVariancePopulationInput
  varianceSample: KnexMigrationsHavingVarianceSampleInput
}

input KnexMigrationsHavingMaxInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingMinInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingStddevPopulationInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingStddevSampleInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingSumInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingVariancePopulationInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

input KnexMigrationsHavingVarianceSampleInput {
  batch: HavingIntFilter
  id: HavingIntFilter
  migrationTime: HavingDatetimeFilter
}

type KnexMigrationsLock implements Node {
  index: Int!
  isLocked: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type KnexMigrationsLockAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: KnexMigrationsLockAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: KnexMigrationsLockDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: KnexMigrationsLockMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: KnexMigrationsLockMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: KnexMigrationsLockStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: KnexMigrationsLockStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: KnexMigrationsLockSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: KnexMigrationsLockVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: KnexMigrationsLockVarianceSampleAggregates
}

type KnexMigrationsLockAverageAggregates {
  """Mean average of index across the matching connection"""
  index: BigFloat

  """Mean average of isLocked across the matching connection"""
  isLocked: BigFloat
}

"""
A condition to be used against `KnexMigrationsLock` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationsLockCondition {
  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `isLocked` field."""
  isLocked: Int
}

type KnexMigrationsLockDistinctCountAggregates {
  """Distinct count of index across the matching connection"""
  index: BigInt

  """Distinct count of isLocked across the matching connection"""
  isLocked: BigInt
}

"""
A filter to be used against `KnexMigrationsLock` object types. All fields are combined with a logical ‘and.’
"""
input KnexMigrationsLockFilter {
  """Checks for all expressions in this list."""
  and: [KnexMigrationsLockFilter!]

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `isLocked` field."""
  isLocked: IntFilter

  """Negates the expression."""
  not: KnexMigrationsLockFilter

  """Checks for any expressions in this list."""
  or: [KnexMigrationsLockFilter!]
}

"""
Grouping methods for `KnexMigrationsLock` for usage during aggregation.
"""
enum KnexMigrationsLockGroupBy {
  IS_LOCKED
}

input KnexMigrationsLockHavingAverageInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingDistinctCountInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

"""Conditions for `KnexMigrationsLock` aggregates."""
input KnexMigrationsLockHavingInput {
  AND: [KnexMigrationsLockHavingInput!]
  OR: [KnexMigrationsLockHavingInput!]
  average: KnexMigrationsLockHavingAverageInput
  distinctCount: KnexMigrationsLockHavingDistinctCountInput
  max: KnexMigrationsLockHavingMaxInput
  min: KnexMigrationsLockHavingMinInput
  stddevPopulation: KnexMigrationsLockHavingStddevPopulationInput
  stddevSample: KnexMigrationsLockHavingStddevSampleInput
  sum: KnexMigrationsLockHavingSumInput
  variancePopulation: KnexMigrationsLockHavingVariancePopulationInput
  varianceSample: KnexMigrationsLockHavingVarianceSampleInput
}

input KnexMigrationsLockHavingMaxInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingMinInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingStddevPopulationInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingStddevSampleInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingSumInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingVariancePopulationInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

input KnexMigrationsLockHavingVarianceSampleInput {
  index: HavingIntFilter
  isLocked: HavingIntFilter
}

type KnexMigrationsLockMaxAggregates {
  """Maximum of index across the matching connection"""
  index: Int

  """Maximum of isLocked across the matching connection"""
  isLocked: Int
}

type KnexMigrationsLockMinAggregates {
  """Minimum of index across the matching connection"""
  index: Int

  """Minimum of isLocked across the matching connection"""
  isLocked: Int
}

type KnexMigrationsLockStddevPopulationAggregates {
  """Population standard deviation of index across the matching connection"""
  index: BigFloat

  """
  Population standard deviation of isLocked across the matching connection
  """
  isLocked: BigFloat
}

type KnexMigrationsLockStddevSampleAggregates {
  """Sample standard deviation of index across the matching connection"""
  index: BigFloat

  """Sample standard deviation of isLocked across the matching connection"""
  isLocked: BigFloat
}

type KnexMigrationsLockSumAggregates {
  """Sum of index across the matching connection"""
  index: BigInt!

  """Sum of isLocked across the matching connection"""
  isLocked: BigInt!
}

type KnexMigrationsLockVariancePopulationAggregates {
  """Population variance of index across the matching connection"""
  index: BigFloat

  """Population variance of isLocked across the matching connection"""
  isLocked: BigFloat
}

type KnexMigrationsLockVarianceSampleAggregates {
  """Sample variance of index across the matching connection"""
  index: BigFloat

  """Sample variance of isLocked across the matching connection"""
  isLocked: BigFloat
}

"""A connection to a list of `KnexMigrationsLock` values."""
type KnexMigrationsLocksConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: KnexMigrationsLockAggregates

  """
  A list of edges which contains the `KnexMigrationsLock` and cursor to aid in pagination.
  """
  edges: [KnexMigrationsLocksEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `KnexMigrationsLock` for these aggregates.
    """
    groupBy: [KnexMigrationsLockGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: KnexMigrationsLockHavingInput
  ): [KnexMigrationsLockAggregates!]

  """A list of `KnexMigrationsLock` objects."""
  nodes: [KnexMigrationsLock]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `KnexMigrationsLock` you could get from the connection.
  """
  totalCount: Int!
}

"""A `KnexMigrationsLock` edge in the connection."""
type KnexMigrationsLocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KnexMigrationsLock` at the end of the edge."""
  node: KnexMigrationsLock
}

"""Methods to use when ordering `KnexMigrationsLock`."""
enum KnexMigrationsLocksOrderBy {
  INDEX_ASC
  INDEX_DESC
  IS_LOCKED_ASC
  IS_LOCKED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `KnexMigration`."""
enum KnexMigrationsOrderBy {
  BATCH_ASC
  BATCH_DESC
  ID_ASC
  ID_DESC
  MIGRATION_TIME_ASC
  MIGRATION_TIME_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type LoggedUser {
  """User access token"""
  accessToken: String!

  """User email"""
  email: String!

  """User first name"""
  firstName: String!

  """User id"""
  id: String!

  """User last name"""
  lastName: String!

  """User middle name"""
  middleName: String!

  """User refresh token"""
  refreshToken: String

  """User roles"""
  roles: [Role!]!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  checkRecoveryHash(input: CheckRecoveryHashInput!): Boolean!
  countBusinessDays(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CountBusinessDaysInput!
  ): CountBusinessDaysPayload
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createDocument(input: CreateDocumentInput!): Document!
  createDocumentTemplate(input: CreateDocumentTemplateInput!): DocumentTemplate!
  createDocumentType(input: CreateDocumentTypeInput!): DocumentType!
  createUser(createUserInput: CreateUserInput!): UserType!
  loginSendCode(input: UserLoginSendCodeInput!): SentCodeEntity!
  loginUser(input: UserLoginInput!): LoggedUser!
  loginUserByPhone(input: UserLoginByPhoneInput!): LoggedUser!
  refreshTokens(input: RefreshTokensInput!): TokenPairType!
  removeComment(id: String!): Comment!
  removeDocument(id: String!): Document!
  removeDocumentTemplate(id: String!): DocumentTemplate!
  removeDocumentType(id: String!): DocumentType!
  removeUser(id: String!): UserType!
  sendRecoverPasswordEmail(email: String!): Boolean
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updateDocument(input: UpdateDocumentInput!): Document!
  updateDocumentTemplate(input: UpdateDocumentTemplateInput!): DocumentTemplate!
  updateDocumentType(input: UpdateDocumentTypeInput!): DocumentType!
  updatePassword(input: UpdatePasswordInput!): UserType!
  updateRolePermission(input: UpdateRolePermissionInput!): [Permission!]!
  updateUser(updateUserInput: UpdateUserInput!): UserType!
  uploadFile(file: Upload!): FileType!
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Permission implements Node {
  """Reads and enables pagination through a set of `Permission`."""
  childPermissions(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!]
  ): [Permission!]!

  """Reads and enables pagination through a set of `Permission`."""
  childPermissionsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsConnection!
  code: String!
  group: String!
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Permission` that is related to this `Permission`."""
  parent: Permission
  parentId: Int

  """Reads and enables pagination through a set of `RolePermission`."""
  rolePermissions(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RolePermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RolePermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RolePermission`."""
    orderBy: [RolePermissionsOrderBy!]
  ): [RolePermission!]!

  """Reads and enables pagination through a set of `RolePermission`."""
  rolePermissionsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RolePermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RolePermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RolePermission`."""
    orderBy: [RolePermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolePermissionsConnection!

  """Roles with this permission"""
  roles: [Role!]!
}

type PermissionAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: PermissionAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: PermissionDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: PermissionMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: PermissionMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: PermissionStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: PermissionStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: PermissionSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: PermissionVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: PermissionVarianceSampleAggregates
}

"""A filter to be used against aggregates of `Permission` object types."""
input PermissionAggregatesFilter {
  """Mean average aggregate over matching `Permission` objects."""
  average: PermissionAverageAggregateFilter

  """Distinct count aggregate over matching `Permission` objects."""
  distinctCount: PermissionDistinctCountAggregateFilter

  """
  A filter that must pass for the relevant `Permission` object to be included within the aggregate.
  """
  filter: PermissionFilter

  """Maximum aggregate over matching `Permission` objects."""
  max: PermissionMaxAggregateFilter

  """Minimum aggregate over matching `Permission` objects."""
  min: PermissionMinAggregateFilter

  """
  Population standard deviation aggregate over matching `Permission` objects.
  """
  stddevPopulation: PermissionStddevPopulationAggregateFilter

  """
  Sample standard deviation aggregate over matching `Permission` objects.
  """
  stddevSample: PermissionStddevSampleAggregateFilter

  """Sum aggregate over matching `Permission` objects."""
  sum: PermissionSumAggregateFilter

  """Population variance aggregate over matching `Permission` objects."""
  variancePopulation: PermissionVariancePopulationAggregateFilter

  """Sample variance aggregate over matching `Permission` objects."""
  varianceSample: PermissionVarianceSampleAggregateFilter
}

input PermissionAverageAggregateFilter {
  id: BigFloatFilter
  parentId: BigFloatFilter
}

type PermissionAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of parentId across the matching connection"""
  parentId: BigFloat
}

"""
A condition to be used against `Permission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PermissionCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `group` field."""
  group: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int
}

input PermissionDistinctCountAggregateFilter {
  code: BigIntFilter
  group: BigIntFilter
  id: BigIntFilter
  name: BigIntFilter
  parentId: BigIntFilter
}

type PermissionDistinctCountAggregates {
  """Distinct count of code across the matching connection"""
  code: BigInt

  """Distinct count of group across the matching connection"""
  group: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt

  """Distinct count of parentId across the matching connection"""
  parentId: BigInt
}

"""Permission Enum"""
enum PermissionEnum {
  CAN_EDIT_PERMISSIONS
  CAN_EDIT_USERS
  CAN_VIEW_PERMISSIONS
  CAN_VIEW_USERS
  CAN_VIEW_USERS_ANY
  CAN_VIEW_USERS_OWN
}

"""
A filter to be used against `Permission` object types. All fields are combined with a logical ‘and.’
"""
input PermissionFilter {
  """Checks for all expressions in this list."""
  and: [PermissionFilter!]

  """Filter by the object’s `childPermissionsConnection` relation."""
  childPermissionsConnection: PermissionToManyPermissionFilter

  """Some related `childPermissionsConnection` exist."""
  childPermissionsConnectionExist: Boolean

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `group` field."""
  group: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PermissionFilter

  """Checks for any expressions in this list."""
  or: [PermissionFilter!]

  """Filter by the object’s `parent` relation."""
  parent: PermissionFilter

  """A related `parent` exists."""
  parentExists: Boolean

  """Filter by the object’s `parentId` field."""
  parentId: IntFilter

  """Filter by the object’s `rolePermissionsConnection` relation."""
  rolePermissionsConnection: PermissionToManyRolePermissionFilter

  """Some related `rolePermissionsConnection` exist."""
  rolePermissionsConnectionExist: Boolean
}

"""Grouping methods for `Permission` for usage during aggregation."""
enum PermissionGroupBy {
  GROUP
  NAME
  PARENT_ID
}

enum PermissionGroupEnum {
  PERMISSION
  USER
}

input PermissionHavingAverageInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingDistinctCountInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

"""Conditions for `Permission` aggregates."""
input PermissionHavingInput {
  AND: [PermissionHavingInput!]
  OR: [PermissionHavingInput!]
  average: PermissionHavingAverageInput
  distinctCount: PermissionHavingDistinctCountInput
  max: PermissionHavingMaxInput
  min: PermissionHavingMinInput
  stddevPopulation: PermissionHavingStddevPopulationInput
  stddevSample: PermissionHavingStddevSampleInput
  sum: PermissionHavingSumInput
  variancePopulation: PermissionHavingVariancePopulationInput
  varianceSample: PermissionHavingVarianceSampleInput
}

input PermissionHavingMaxInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingMinInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingStddevPopulationInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingStddevSampleInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingSumInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingVariancePopulationInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionHavingVarianceSampleInput {
  id: HavingIntFilter
  parentId: HavingIntFilter
}

input PermissionMaxAggregateFilter {
  id: IntFilter
  parentId: IntFilter
}

type PermissionMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int

  """Maximum of parentId across the matching connection"""
  parentId: Int
}

input PermissionMinAggregateFilter {
  id: IntFilter
  parentId: IntFilter
}

type PermissionMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int

  """Minimum of parentId across the matching connection"""
  parentId: Int
}

input PermissionStddevPopulationAggregateFilter {
  id: BigFloatFilter
  parentId: BigFloatFilter
}

type PermissionStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """
  Population standard deviation of parentId across the matching connection
  """
  parentId: BigFloat
}

input PermissionStddevSampleAggregateFilter {
  id: BigFloatFilter
  parentId: BigFloatFilter
}

type PermissionStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """Sample standard deviation of parentId across the matching connection"""
  parentId: BigFloat
}

input PermissionSumAggregateFilter {
  id: BigIntFilter
  parentId: BigIntFilter
}

type PermissionSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!

  """Sum of parentId across the matching connection"""
  parentId: BigInt!
}

"""
A filter to be used against many `Permission` object types. All fields are combined with a logical ‘and.’
"""
input PermissionToManyPermissionFilter {
  """Aggregates across related `Permission` match the filter criteria."""
  aggregates: PermissionAggregatesFilter

  """
  Every related `Permission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PermissionFilter

  """
  No related `Permission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PermissionFilter

  """
  Some related `Permission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PermissionFilter
}

"""
A filter to be used against many `RolePermission` object types. All fields are combined with a logical ‘and.’
"""
input PermissionToManyRolePermissionFilter {
  """Aggregates across related `RolePermission` match the filter criteria."""
  aggregates: RolePermissionAggregatesFilter

  """
  Every related `RolePermission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RolePermissionFilter

  """
  No related `RolePermission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RolePermissionFilter

  """
  Some related `RolePermission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RolePermissionFilter
}

input PermissionVariancePopulationAggregateFilter {
  id: BigFloatFilter
  parentId: BigFloatFilter
}

type PermissionVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of parentId across the matching connection"""
  parentId: BigFloat
}

input PermissionVarianceSampleAggregateFilter {
  id: BigFloatFilter
  parentId: BigFloatFilter
}

type PermissionVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of parentId across the matching connection"""
  parentId: BigFloat
}

type PermissionsAndRolesResult {
  groups: [PermissionsByGroup!]!

  """Role with permission ids"""
  roles: [PermissionsRoles!]!
}

type PermissionsByGroup {
  """Permission group code"""
  code: PermissionGroupEnum!

  """Permission group name"""
  name: String!

  """Permissions in the group"""
  permissions: [Permission!]!
}

"""A connection to a list of `Permission` values."""
type PermissionsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: PermissionAggregates

  """
  A list of edges which contains the `Permission` and cursor to aid in pagination.
  """
  edges: [PermissionsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Permission` for these aggregates."""
    groupBy: [PermissionGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: PermissionHavingInput
  ): [PermissionAggregates!]

  """A list of `Permission` objects."""
  nodes: [Permission]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Permission` you could get from the connection."""
  totalCount: Int!
}

"""A `Permission` edge in the connection."""
type PermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Permission` at the end of the edge."""
  node: Permission
}

"""Methods to use when ordering `Permission`."""
enum PermissionsOrderBy {
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_AVERAGE_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_COUNT_ASC
  CHILD_PERMISSIONS_CONNECTION_COUNT_DESC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_DISTINCT_COUNT_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_MAX_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_MAX_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_MAX_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_MAX_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_MAX_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_MAX_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_MAX_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_MAX_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_MAX_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_MAX_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_MIN_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_MIN_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_MIN_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_MIN_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_MIN_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_MIN_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_MIN_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_MIN_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_MIN_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_MIN_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_POPULATION_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_SUM_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_SUM_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_SUM_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_SUM_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_SUM_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_SUM_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_SUM_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_SUM_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_SUM_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_SUM_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_PARENT_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_CODE_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_CODE_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_GROUP_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_GROUP_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_NAME_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_NAME_DESC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_PARENT_ID_ASC
  CHILD_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_PARENT_ID_DESC
  CODE_ASC
  CODE_DESC
  GROUP_ASC
  GROUP_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_COUNT_ASC
  ROLE_PERMISSIONS_CONNECTION_COUNT_DESC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MAX_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MAX_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MAX_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MAX_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MAX_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MAX_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MIN_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MIN_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MIN_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MIN_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MIN_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MIN_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_SUM_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_SUM_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_SUM_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_SUM_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_SUM_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_SUM_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_DESC
}

type PermissionsRoles {
  """Role code"""
  code: RoleCodesEnum!

  """Role id"""
  id: Int!

  """Role name"""
  name: String!

  """permission ids"""
  permissionIds: [Int!]!
}

"""A connection to a list of `Property` values."""
type PropertiesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: PropertyAggregates

  """
  A list of edges which contains the `Property` and cursor to aid in pagination.
  """
  edges: [PropertiesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Property` for these aggregates."""
    groupBy: [PropertyGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: PropertyHavingInput
  ): [PropertyAggregates!]

  """A list of `Property` objects."""
  nodes: [Property]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Property` you could get from the connection."""
  totalCount: Int!
}

"""A `Property` edge in the connection."""
type PropertiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Property` at the end of the edge."""
  node: Property
}

"""Methods to use when ordering `Property`."""
enum PropertiesOrderBy {
  BATHROOMS_COUNT_ASC
  BATHROOMS_COUNT_DESC
  BEDROOMS_COUNT_ASC
  BEDROOMS_COUNT_DESC
  BEDROOMS_SIZE_ASC
  BEDROOMS_SIZE_DESC
  BUILDING_SIZE_ASC
  BUILDING_SIZE_DESC
  CREATED_ASC
  CREATED_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ID_ASC
  ID_DESC
  LAND_SIZE_ASC
  LAND_SIZE_DESC
  LEASE_EXPIRY_YEAR_ASC
  LEASE_EXPIRY_YEAR_DESC
  LEASE_YEARS_LEFT_ASC
  LEASE_YEARS_LEFT_DESC
  LOCATION_ASC
  LOCATION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  NOTES_ASC
  NOTES_DESC
  OWNERSHIP_ASC
  OWNERSHIP_DESC
  PHOTOS_ASC
  PHOTOS_DESC
  POOL_ASC
  POOL_DESC
  PRICE_IDR_ASC
  PRICE_IDR_DESC
  PRICE_PER_BUILDING_SQM_ASC
  PRICE_PER_BUILDING_SQM_DESC
  PRICE_PER_BUILDING_SQM_PER_YEAR_ASC
  PRICE_PER_BUILDING_SQM_PER_YEAR_DESC
  PRICE_USD_ASC
  PRICE_USD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROPERTY_PRICES_CONNECTION_AVERAGE_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_AVERAGE_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_AVERAGE_ID_ASC
  PROPERTY_PRICES_CONNECTION_AVERAGE_ID_DESC
  PROPERTY_PRICES_CONNECTION_AVERAGE_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_AVERAGE_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_AVERAGE_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_AVERAGE_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_AVERAGE_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_AVERAGE_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_COUNT_ASC
  PROPERTY_PRICES_CONNECTION_COUNT_DESC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_ID_ASC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_ID_DESC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_DISTINCT_COUNT_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_MAX_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_MAX_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_MAX_ID_ASC
  PROPERTY_PRICES_CONNECTION_MAX_ID_DESC
  PROPERTY_PRICES_CONNECTION_MAX_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_MAX_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_MAX_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_MAX_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_MAX_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_MAX_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_MIN_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_MIN_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_MIN_ID_ASC
  PROPERTY_PRICES_CONNECTION_MIN_ID_DESC
  PROPERTY_PRICES_CONNECTION_MIN_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_MIN_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_MIN_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_MIN_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_MIN_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_MIN_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_ID_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_ID_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_POPULATION_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_ID_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_ID_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_STDDEV_SAMPLE_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_SUM_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_SUM_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_SUM_ID_ASC
  PROPERTY_PRICES_CONNECTION_SUM_ID_DESC
  PROPERTY_PRICES_CONNECTION_SUM_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_SUM_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_SUM_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_SUM_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_SUM_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_SUM_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_ID_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_ID_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_POPULATION_PROPERTY_ID_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_CREATED_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_CREATED_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_PRICE_IDR_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_PRICE_IDR_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_PRICE_USD_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_PRICE_USD_DESC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_PROPERTY_ID_ASC
  PROPERTY_PRICES_CONNECTION_VARIANCE_SAMPLE_PROPERTY_ID_DESC
  PROPERTY_TYPE_ASC
  PROPERTY_TYPE_DESC
  SOURCE_ASC
  SOURCE_DESC
  UPDATED_ASC
  UPDATED_DESC
  URL_ASC
  URL_DESC
}

type Property implements Node {
  bathroomsCount: Int
  bedroomsCount: Int
  bedroomsSize: Int
  buildingSize: Float
  created: Datetime!
  externalId: String!
  id: UUID!
  landSize: Float
  leaseExpiryYear: Int
  leaseYearsLeft: Int
  location: String
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  notes: String
  ownership: String
  photos: String
  pool: String
  priceIdr: BigFloat
  pricePerBuildingSqm: String
  pricePerBuildingSqmPerYear: String
  priceUsd: BigFloat

  """Reads and enables pagination through a set of `PropertyPrice`."""
  propertyPrices(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PropertyPriceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PropertyPriceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PropertyPrice`."""
    orderBy: [PropertyPricesOrderBy!]
  ): [PropertyPrice!]!

  """Reads and enables pagination through a set of `PropertyPrice`."""
  propertyPricesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PropertyPriceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PropertyPriceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PropertyPrice`."""
    orderBy: [PropertyPricesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PropertyPricesConnection!
  propertyType: String
  source: String!
  updated: Datetime!
  url: String
}

type PropertyAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: PropertyAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: PropertyDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: PropertyMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: PropertyMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: PropertyStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: PropertyStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: PropertySumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: PropertyVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: PropertyVarianceSampleAggregates
}

type PropertyAverageAggregates {
  """Mean average of bathroomsCount across the matching connection"""
  bathroomsCount: BigFloat

  """Mean average of bedroomsCount across the matching connection"""
  bedroomsCount: BigFloat

  """Mean average of bedroomsSize across the matching connection"""
  bedroomsSize: BigFloat

  """Mean average of buildingSize across the matching connection"""
  buildingSize: Float

  """Mean average of landSize across the matching connection"""
  landSize: Float

  """Mean average of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: BigFloat

  """Mean average of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: BigFloat

  """Mean average of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Mean average of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

"""
A condition to be used against `Property` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PropertyCondition {
  """Checks for equality with the object’s `bathroomsCount` field."""
  bathroomsCount: Int

  """Checks for equality with the object’s `bedroomsCount` field."""
  bedroomsCount: Int

  """Checks for equality with the object’s `bedroomsSize` field."""
  bedroomsSize: Int

  """Checks for equality with the object’s `buildingSize` field."""
  buildingSize: Float

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `landSize` field."""
  landSize: Float

  """Checks for equality with the object’s `leaseExpiryYear` field."""
  leaseExpiryYear: Int

  """Checks for equality with the object’s `leaseYearsLeft` field."""
  leaseYearsLeft: Int

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `notes` field."""
  notes: String

  """Checks for equality with the object’s `ownership` field."""
  ownership: String

  """Checks for equality with the object’s `photos` field."""
  photos: String

  """Checks for equality with the object’s `pool` field."""
  pool: String

  """Checks for equality with the object’s `priceIdr` field."""
  priceIdr: BigFloat

  """Checks for equality with the object’s `pricePerBuildingSqm` field."""
  pricePerBuildingSqm: String

  """
  Checks for equality with the object’s `pricePerBuildingSqmPerYear` field.
  """
  pricePerBuildingSqmPerYear: String

  """Checks for equality with the object’s `priceUsd` field."""
  priceUsd: BigFloat

  """Checks for equality with the object’s `propertyType` field."""
  propertyType: String

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

type PropertyDistinctCountAggregates {
  """Distinct count of bathroomsCount across the matching connection"""
  bathroomsCount: BigInt

  """Distinct count of bedroomsCount across the matching connection"""
  bedroomsCount: BigInt

  """Distinct count of bedroomsSize across the matching connection"""
  bedroomsSize: BigInt

  """Distinct count of buildingSize across the matching connection"""
  buildingSize: BigInt

  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of externalId across the matching connection"""
  externalId: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of landSize across the matching connection"""
  landSize: BigInt

  """Distinct count of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: BigInt

  """Distinct count of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: BigInt

  """Distinct count of location across the matching connection"""
  location: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt

  """Distinct count of notes across the matching connection"""
  notes: BigInt

  """Distinct count of ownership across the matching connection"""
  ownership: BigInt

  """Distinct count of photos across the matching connection"""
  photos: BigInt

  """Distinct count of pool across the matching connection"""
  pool: BigInt

  """Distinct count of priceIdr across the matching connection"""
  priceIdr: BigInt

  """Distinct count of pricePerBuildingSqm across the matching connection"""
  pricePerBuildingSqm: BigInt

  """
  Distinct count of pricePerBuildingSqmPerYear across the matching connection
  """
  pricePerBuildingSqmPerYear: BigInt

  """Distinct count of priceUsd across the matching connection"""
  priceUsd: BigInt

  """Distinct count of propertyType across the matching connection"""
  propertyType: BigInt

  """Distinct count of source across the matching connection"""
  source: BigInt

  """Distinct count of updated across the matching connection"""
  updated: BigInt

  """Distinct count of url across the matching connection"""
  url: BigInt
}

"""
A filter to be used against `Property` object types. All fields are combined with a logical ‘and.’
"""
input PropertyFilter {
  """Checks for all expressions in this list."""
  and: [PropertyFilter!]

  """Filter by the object’s `bathroomsCount` field."""
  bathroomsCount: IntFilter

  """Filter by the object’s `bedroomsCount` field."""
  bedroomsCount: IntFilter

  """Filter by the object’s `bedroomsSize` field."""
  bedroomsSize: IntFilter

  """Filter by the object’s `buildingSize` field."""
  buildingSize: FloatFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `landSize` field."""
  landSize: FloatFilter

  """Filter by the object’s `leaseExpiryYear` field."""
  leaseExpiryYear: IntFilter

  """Filter by the object’s `leaseYearsLeft` field."""
  leaseYearsLeft: IntFilter

  """Filter by the object’s `location` field."""
  location: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PropertyFilter

  """Filter by the object’s `notes` field."""
  notes: StringFilter

  """Checks for any expressions in this list."""
  or: [PropertyFilter!]

  """Filter by the object’s `ownership` field."""
  ownership: StringFilter

  """Filter by the object’s `photos` field."""
  photos: StringFilter

  """Filter by the object’s `pool` field."""
  pool: StringFilter

  """Filter by the object’s `priceIdr` field."""
  priceIdr: BigFloatFilter

  """Filter by the object’s `pricePerBuildingSqm` field."""
  pricePerBuildingSqm: StringFilter

  """Filter by the object’s `pricePerBuildingSqmPerYear` field."""
  pricePerBuildingSqmPerYear: StringFilter

  """Filter by the object’s `priceUsd` field."""
  priceUsd: BigFloatFilter

  """Filter by the object’s `propertyPricesConnection` relation."""
  propertyPricesConnection: PropertyToManyPropertyPriceFilter

  """Some related `propertyPricesConnection` exist."""
  propertyPricesConnectionExist: Boolean

  """Filter by the object’s `propertyType` field."""
  propertyType: StringFilter

  """Filter by the object’s `source` field."""
  source: StringFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""Grouping methods for `Property` for usage during aggregation."""
enum PropertyGroupBy {
  BATHROOMS_COUNT
  BEDROOMS_COUNT
  BEDROOMS_SIZE
  BUILDING_SIZE
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  EXTERNAL_ID
  LAND_SIZE
  LEASE_EXPIRY_YEAR
  LEASE_YEARS_LEFT
  LOCATION
  NAME
  NOTES
  OWNERSHIP
  PHOTOS
  POOL
  PRICE_IDR
  PRICE_PER_BUILDING_SQM
  PRICE_PER_BUILDING_SQM_PER_YEAR
  PRICE_USD
  PROPERTY_TYPE
  SOURCE
  UPDATED
  UPDATED_TRUNCATED_TO_DAY
  UPDATED_TRUNCATED_TO_HOUR
  URL
}

input PropertyHavingAverageInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingDistinctCountInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

"""Conditions for `Property` aggregates."""
input PropertyHavingInput {
  AND: [PropertyHavingInput!]
  OR: [PropertyHavingInput!]
  average: PropertyHavingAverageInput
  distinctCount: PropertyHavingDistinctCountInput
  max: PropertyHavingMaxInput
  min: PropertyHavingMinInput
  stddevPopulation: PropertyHavingStddevPopulationInput
  stddevSample: PropertyHavingStddevSampleInput
  sum: PropertyHavingSumInput
  variancePopulation: PropertyHavingVariancePopulationInput
  varianceSample: PropertyHavingVarianceSampleInput
}

input PropertyHavingMaxInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingMinInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingStddevPopulationInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingStddevSampleInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingSumInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingVariancePopulationInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

input PropertyHavingVarianceSampleInput {
  bathroomsCount: HavingIntFilter
  bedroomsCount: HavingIntFilter
  bedroomsSize: HavingIntFilter
  buildingSize: HavingFloatFilter
  created: HavingDatetimeFilter
  landSize: HavingFloatFilter
  leaseExpiryYear: HavingIntFilter
  leaseYearsLeft: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
  updated: HavingDatetimeFilter
}

type PropertyMaxAggregates {
  """Maximum of bathroomsCount across the matching connection"""
  bathroomsCount: Int

  """Maximum of bedroomsCount across the matching connection"""
  bedroomsCount: Int

  """Maximum of bedroomsSize across the matching connection"""
  bedroomsSize: Int

  """Maximum of buildingSize across the matching connection"""
  buildingSize: Float

  """Maximum of landSize across the matching connection"""
  landSize: Float

  """Maximum of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: Int

  """Maximum of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: Int

  """Maximum of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Maximum of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

type PropertyMinAggregates {
  """Minimum of bathroomsCount across the matching connection"""
  bathroomsCount: Int

  """Minimum of bedroomsCount across the matching connection"""
  bedroomsCount: Int

  """Minimum of bedroomsSize across the matching connection"""
  bedroomsSize: Int

  """Minimum of buildingSize across the matching connection"""
  buildingSize: Float

  """Minimum of landSize across the matching connection"""
  landSize: Float

  """Minimum of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: Int

  """Minimum of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: Int

  """Minimum of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Minimum of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

type PropertyPrice implements Node {
  created: Datetime!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  priceIdr: BigFloat
  priceUsd: BigFloat

  """Reads a single `Property` that is related to this `PropertyPrice`."""
  property: Property
  propertyId: UUID!
}

type PropertyPriceAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: PropertyPriceAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: PropertyPriceDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: PropertyPriceMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: PropertyPriceMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: PropertyPriceStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: PropertyPriceStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: PropertyPriceSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: PropertyPriceVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: PropertyPriceVarianceSampleAggregates
}

"""
A filter to be used against aggregates of `PropertyPrice` object types.
"""
input PropertyPriceAggregatesFilter {
  """Mean average aggregate over matching `PropertyPrice` objects."""
  average: PropertyPriceAverageAggregateFilter

  """Distinct count aggregate over matching `PropertyPrice` objects."""
  distinctCount: PropertyPriceDistinctCountAggregateFilter

  """
  A filter that must pass for the relevant `PropertyPrice` object to be included within the aggregate.
  """
  filter: PropertyPriceFilter

  """Maximum aggregate over matching `PropertyPrice` objects."""
  max: PropertyPriceMaxAggregateFilter

  """Minimum aggregate over matching `PropertyPrice` objects."""
  min: PropertyPriceMinAggregateFilter

  """
  Population standard deviation aggregate over matching `PropertyPrice` objects.
  """
  stddevPopulation: PropertyPriceStddevPopulationAggregateFilter

  """
  Sample standard deviation aggregate over matching `PropertyPrice` objects.
  """
  stddevSample: PropertyPriceStddevSampleAggregateFilter

  """Sum aggregate over matching `PropertyPrice` objects."""
  sum: PropertyPriceSumAggregateFilter

  """Population variance aggregate over matching `PropertyPrice` objects."""
  variancePopulation: PropertyPriceVariancePopulationAggregateFilter

  """Sample variance aggregate over matching `PropertyPrice` objects."""
  varianceSample: PropertyPriceVarianceSampleAggregateFilter
}

input PropertyPriceAverageAggregateFilter {
  id: BigFloatFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Mean average of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

"""
A condition to be used against `PropertyPrice` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PropertyPriceCondition {
  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `priceIdr` field."""
  priceIdr: BigFloat

  """Checks for equality with the object’s `priceUsd` field."""
  priceUsd: BigFloat

  """Checks for equality with the object’s `propertyId` field."""
  propertyId: UUID
}

input PropertyPriceDistinctCountAggregateFilter {
  created: BigIntFilter
  id: BigIntFilter
  priceIdr: BigIntFilter
  priceUsd: BigIntFilter
  propertyId: BigIntFilter
}

type PropertyPriceDistinctCountAggregates {
  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of priceIdr across the matching connection"""
  priceIdr: BigInt

  """Distinct count of priceUsd across the matching connection"""
  priceUsd: BigInt

  """Distinct count of propertyId across the matching connection"""
  propertyId: BigInt
}

"""
A filter to be used against `PropertyPrice` object types. All fields are combined with a logical ‘and.’
"""
input PropertyPriceFilter {
  """Checks for all expressions in this list."""
  and: [PropertyPriceFilter!]

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: PropertyPriceFilter

  """Checks for any expressions in this list."""
  or: [PropertyPriceFilter!]

  """Filter by the object’s `priceIdr` field."""
  priceIdr: BigFloatFilter

  """Filter by the object’s `priceUsd` field."""
  priceUsd: BigFloatFilter

  """Filter by the object’s `property` relation."""
  property: PropertyFilter

  """Filter by the object’s `propertyId` field."""
  propertyId: UUIDFilter
}

"""Grouping methods for `PropertyPrice` for usage during aggregation."""
enum PropertyPriceGroupBy {
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  PRICE_IDR
  PRICE_USD
  PROPERTY_ID
}

input PropertyPriceHavingAverageInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingDistinctCountInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

"""Conditions for `PropertyPrice` aggregates."""
input PropertyPriceHavingInput {
  AND: [PropertyPriceHavingInput!]
  OR: [PropertyPriceHavingInput!]
  average: PropertyPriceHavingAverageInput
  distinctCount: PropertyPriceHavingDistinctCountInput
  max: PropertyPriceHavingMaxInput
  min: PropertyPriceHavingMinInput
  stddevPopulation: PropertyPriceHavingStddevPopulationInput
  stddevSample: PropertyPriceHavingStddevSampleInput
  sum: PropertyPriceHavingSumInput
  variancePopulation: PropertyPriceHavingVariancePopulationInput
  varianceSample: PropertyPriceHavingVarianceSampleInput
}

input PropertyPriceHavingMaxInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingMinInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingStddevPopulationInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingStddevSampleInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingSumInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingVariancePopulationInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceHavingVarianceSampleInput {
  created: HavingDatetimeFilter
  id: HavingIntFilter
  priceIdr: HavingBigfloatFilter
  priceUsd: HavingBigfloatFilter
}

input PropertyPriceMaxAggregateFilter {
  id: IntFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int

  """Maximum of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Maximum of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

input PropertyPriceMinAggregateFilter {
  id: IntFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int

  """Minimum of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Minimum of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

input PropertyPriceStddevPopulationAggregateFilter {
  id: BigFloatFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """
  Population standard deviation of priceIdr across the matching connection
  """
  priceIdr: BigFloat

  """
  Population standard deviation of priceUsd across the matching connection
  """
  priceUsd: BigFloat
}

input PropertyPriceStddevSampleAggregateFilter {
  id: BigFloatFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """Sample standard deviation of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Sample standard deviation of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

input PropertyPriceSumAggregateFilter {
  id: BigIntFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!

  """Sum of priceIdr across the matching connection"""
  priceIdr: BigFloat!

  """Sum of priceUsd across the matching connection"""
  priceUsd: BigFloat!
}

input PropertyPriceVariancePopulationAggregateFilter {
  id: BigFloatFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Population variance of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

input PropertyPriceVarianceSampleAggregateFilter {
  id: BigFloatFilter
  priceIdr: BigFloatFilter
  priceUsd: BigFloatFilter
}

type PropertyPriceVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Sample variance of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

"""A connection to a list of `PropertyPrice` values."""
type PropertyPricesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: PropertyPriceAggregates

  """
  A list of edges which contains the `PropertyPrice` and cursor to aid in pagination.
  """
  edges: [PropertyPricesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `PropertyPrice` for these aggregates."""
    groupBy: [PropertyPriceGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: PropertyPriceHavingInput
  ): [PropertyPriceAggregates!]

  """A list of `PropertyPrice` objects."""
  nodes: [PropertyPrice]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PropertyPrice` you could get from the connection."""
  totalCount: Int!
}

"""A `PropertyPrice` edge in the connection."""
type PropertyPricesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PropertyPrice` at the end of the edge."""
  node: PropertyPrice
}

"""Methods to use when ordering `PropertyPrice`."""
enum PropertyPricesOrderBy {
  CREATED_ASC
  CREATED_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRICE_IDR_ASC
  PRICE_IDR_DESC
  PRICE_USD_ASC
  PRICE_USD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROPERTY_ID_ASC
  PROPERTY_ID_DESC
}

type PropertyStddevPopulationAggregates {
  """
  Population standard deviation of bathroomsCount across the matching connection
  """
  bathroomsCount: BigFloat

  """
  Population standard deviation of bedroomsCount across the matching connection
  """
  bedroomsCount: BigFloat

  """
  Population standard deviation of bedroomsSize across the matching connection
  """
  bedroomsSize: BigFloat

  """
  Population standard deviation of buildingSize across the matching connection
  """
  buildingSize: Float

  """
  Population standard deviation of landSize across the matching connection
  """
  landSize: Float

  """
  Population standard deviation of leaseExpiryYear across the matching connection
  """
  leaseExpiryYear: BigFloat

  """
  Population standard deviation of leaseYearsLeft across the matching connection
  """
  leaseYearsLeft: BigFloat

  """
  Population standard deviation of priceIdr across the matching connection
  """
  priceIdr: BigFloat

  """
  Population standard deviation of priceUsd across the matching connection
  """
  priceUsd: BigFloat
}

type PropertyStddevSampleAggregates {
  """
  Sample standard deviation of bathroomsCount across the matching connection
  """
  bathroomsCount: BigFloat

  """
  Sample standard deviation of bedroomsCount across the matching connection
  """
  bedroomsCount: BigFloat

  """
  Sample standard deviation of bedroomsSize across the matching connection
  """
  bedroomsSize: BigFloat

  """
  Sample standard deviation of buildingSize across the matching connection
  """
  buildingSize: Float

  """Sample standard deviation of landSize across the matching connection"""
  landSize: Float

  """
  Sample standard deviation of leaseExpiryYear across the matching connection
  """
  leaseExpiryYear: BigFloat

  """
  Sample standard deviation of leaseYearsLeft across the matching connection
  """
  leaseYearsLeft: BigFloat

  """Sample standard deviation of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Sample standard deviation of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

type PropertySumAggregates {
  """Sum of bathroomsCount across the matching connection"""
  bathroomsCount: BigInt!

  """Sum of bedroomsCount across the matching connection"""
  bedroomsCount: BigInt!

  """Sum of bedroomsSize across the matching connection"""
  bedroomsSize: BigInt!

  """Sum of buildingSize across the matching connection"""
  buildingSize: Float!

  """Sum of landSize across the matching connection"""
  landSize: Float!

  """Sum of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: BigInt!

  """Sum of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: BigInt!

  """Sum of priceIdr across the matching connection"""
  priceIdr: BigFloat!

  """Sum of priceUsd across the matching connection"""
  priceUsd: BigFloat!
}

"""
A filter to be used against many `PropertyPrice` object types. All fields are combined with a logical ‘and.’
"""
input PropertyToManyPropertyPriceFilter {
  """Aggregates across related `PropertyPrice` match the filter criteria."""
  aggregates: PropertyPriceAggregatesFilter

  """
  Every related `PropertyPrice` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PropertyPriceFilter

  """
  No related `PropertyPrice` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PropertyPriceFilter

  """
  Some related `PropertyPrice` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PropertyPriceFilter
}

type PropertyVariancePopulationAggregates {
  """Population variance of bathroomsCount across the matching connection"""
  bathroomsCount: BigFloat

  """Population variance of bedroomsCount across the matching connection"""
  bedroomsCount: BigFloat

  """Population variance of bedroomsSize across the matching connection"""
  bedroomsSize: BigFloat

  """Population variance of buildingSize across the matching connection"""
  buildingSize: Float

  """Population variance of landSize across the matching connection"""
  landSize: Float

  """Population variance of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: BigFloat

  """Population variance of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: BigFloat

  """Population variance of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Population variance of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

type PropertyVarianceSampleAggregates {
  """Sample variance of bathroomsCount across the matching connection"""
  bathroomsCount: BigFloat

  """Sample variance of bedroomsCount across the matching connection"""
  bedroomsCount: BigFloat

  """Sample variance of bedroomsSize across the matching connection"""
  bedroomsSize: BigFloat

  """Sample variance of buildingSize across the matching connection"""
  buildingSize: Float

  """Sample variance of landSize across the matching connection"""
  landSize: Float

  """Sample variance of leaseExpiryYear across the matching connection"""
  leaseExpiryYear: BigFloat

  """Sample variance of leaseYearsLeft across the matching connection"""
  leaseYearsLeft: BigFloat

  """Sample variance of priceIdr across the matching connection"""
  priceIdr: BigFloat

  """Sample variance of priceUsd across the matching connection"""
  priceUsd: BigFloat
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  comment(id: UUID!): Comment
  commentAttachment(id: Int!): CommentAttachment

  """Reads a single `CommentAttachment` using its globally unique `ID`."""
  commentAttachmentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CommentAttachment`.
    """
    nodeId: ID!
  ): CommentAttachment

  """Reads a set of `CommentAttachment`."""
  commentAttachments(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CommentAttachment`."""
    orderBy: [CommentAttachmentsOrderBy!]
  ): [CommentAttachment!]

  """Reads and enables pagination through a set of `CommentAttachment`."""
  commentAttachmentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CommentAttachment`."""
    orderBy: [CommentAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentAttachmentsConnection

  """Reads a single `Comment` using its globally unique `ID`."""
  commentByNodeId(
    """The globally unique `ID` to be used in selecting a single `Comment`."""
    nodeId: ID!
  ): Comment

  """Reads a set of `Comment`."""
  comments(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
  ): [Comment!]

  """Reads and enables pagination through a set of `Comment`."""
  commentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsConnection
  file(id: UUID!): File

  """Reads a single `File` using its globally unique `ID`."""
  fileByNodeId(
    """The globally unique `ID` to be used in selecting a single `File`."""
    nodeId: ID!
  ): File

  """Reads a set of `File`."""
  files(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]
  ): [File!]

  """Reads and enables pagination through a set of `File`."""
  filesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection
  getApplicationStatus: ApplicationStatusReturnType!
  getEvents(input: GetEventsInput!): [Event!]!
  getPermissionsByUserRoles(input: GetPermissionsByUserRolesInput!): [Role!]!
  knexMigration(id: Int!): KnexMigration

  """Reads a single `KnexMigration` using its globally unique `ID`."""
  knexMigrationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigration`.
    """
    nodeId: ID!
  ): KnexMigration

  """Reads a set of `KnexMigration`."""
  knexMigrations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!]
  ): [KnexMigration!]

  """Reads and enables pagination through a set of `KnexMigration`."""
  knexMigrationsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsConnection
  knexMigrationsLock(index: Int!): KnexMigrationsLock

  """Reads a single `KnexMigrationsLock` using its globally unique `ID`."""
  knexMigrationsLockByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigrationsLock`.
    """
    nodeId: ID!
  ): KnexMigrationsLock

  """Reads a set of `KnexMigrationsLock`."""
  knexMigrationsLocks(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationsLockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationsLockFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!]
  ): [KnexMigrationsLock!]

  """Reads and enables pagination through a set of `KnexMigrationsLock`."""
  knexMigrationsLocksConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationsLockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationsLockFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  permission(id: Int!): Permission
  permissionByCode(code: String!): Permission

  """Reads a single `Permission` using its globally unique `ID`."""
  permissionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Permission`.
    """
    nodeId: ID!
  ): Permission

  """Reads a set of `Permission`."""
  permissions(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!]
  ): [Permission!]
  permissionsByGroupsWithRoles: PermissionsAndRolesResult!

  """Reads and enables pagination through a set of `Permission`."""
  permissionsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsConnection

  """Reads a set of `Property`."""
  properties(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PropertyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PropertyFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Property`."""
    orderBy: [PropertiesOrderBy!]
  ): [Property!]

  """Reads and enables pagination through a set of `Property`."""
  propertiesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PropertyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PropertyFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Property`."""
    orderBy: [PropertiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PropertiesConnection
  property(id: UUID!): Property

  """Reads a single `Property` using its globally unique `ID`."""
  propertyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Property`."""
    nodeId: ID!
  ): Property
  propertyPrice(id: Int!): PropertyPrice

  """Reads a single `PropertyPrice` using its globally unique `ID`."""
  propertyPriceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PropertyPrice`.
    """
    nodeId: ID!
  ): PropertyPrice

  """Reads a set of `PropertyPrice`."""
  propertyPrices(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PropertyPriceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PropertyPriceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PropertyPrice`."""
    orderBy: [PropertyPricesOrderBy!]
  ): [PropertyPrice!]

  """Reads and enables pagination through a set of `PropertyPrice`."""
  propertyPricesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PropertyPriceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PropertyPriceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PropertyPrice`."""
    orderBy: [PropertyPricesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PropertyPricesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  role(id: Int!): Role
  roleByCode(code: String!): Role

  """Reads a single `Role` using its globally unique `ID`."""
  roleByNodeId(
    """The globally unique `ID` to be used in selecting a single `Role`."""
    nodeId: ID!
  ): Role
  rolePermission(id: Int!): RolePermission

  """Reads a single `RolePermission` using its globally unique `ID`."""
  rolePermissionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RolePermission`.
    """
    nodeId: ID!
  ): RolePermission

  """Reads a set of `RolePermission`."""
  rolePermissions(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RolePermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RolePermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RolePermission`."""
    orderBy: [RolePermissionsOrderBy!]
  ): [RolePermission!]

  """Reads and enables pagination through a set of `RolePermission`."""
  rolePermissionsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RolePermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RolePermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RolePermission`."""
    orderBy: [RolePermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolePermissionsConnection

  """Reads a set of `Role`."""
  roles(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
  ): [Role!]

  """Reads and enables pagination through a set of `Role`."""
  rolesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolesConnection
  user(id: UUID!): User
  userByEmail(email: String!): User
  userByLogin(login: String!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userByPhone(phone: String!): User
  userRole(id: Int!): UserRole

  """Reads a single `UserRole` using its globally unique `ID`."""
  userRoleByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserRole`."""
    nodeId: ID!
  ): UserRole

  """Reads a set of `UserRole`."""
  userRoles(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserRole`."""
    orderBy: [UserRolesOrderBy!]
  ): [UserRole!]

  """Reads and enables pagination through a set of `UserRole`."""
  userRolesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserRole`."""
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRolesConnection

  """Reads a set of `User`."""
  users(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
  ): [User!]

  """Reads and enables pagination through a set of `User`."""
  usersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

input RefreshTokensInput {
  deviceId: String!
  refreshToken: String!
}

type Role implements Node {
  code: String!
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """permission ids"""
  permissionIds: [Int!]!

  """Role permissions"""
  permissions: [Permission!]

  """Reads and enables pagination through a set of `RolePermission`."""
  rolePermissions(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RolePermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RolePermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RolePermission`."""
    orderBy: [RolePermissionsOrderBy!]
  ): [RolePermission!]!

  """Reads and enables pagination through a set of `RolePermission`."""
  rolePermissionsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RolePermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RolePermissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RolePermission`."""
    orderBy: [RolePermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolePermissionsConnection!

  """Reads and enables pagination through a set of `UserRole`."""
  userRoles(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserRole`."""
    orderBy: [UserRolesOrderBy!]
  ): [UserRole!]!

  """Reads and enables pagination through a set of `UserRole`."""
  userRolesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserRole`."""
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRolesConnection!
}

type RoleAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: RoleAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: RoleDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: RoleMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: RoleMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: RoleStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: RoleStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: RoleSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: RoleVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: RoleVarianceSampleAggregates
}

type RoleAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat
}

"""Role Code Enum"""
enum RoleCodesEnum {
  admin
  system
  user
}

"""
A condition to be used against `Role` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoleCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

type RoleDistinctCountAggregates {
  """Distinct count of code across the matching connection"""
  code: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt
}

"""
A filter to be used against `Role` object types. All fields are combined with a logical ‘and.’
"""
input RoleFilter {
  """Checks for all expressions in this list."""
  and: [RoleFilter!]

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: RoleFilter

  """Checks for any expressions in this list."""
  or: [RoleFilter!]

  """Filter by the object’s `rolePermissionsConnection` relation."""
  rolePermissionsConnection: RoleToManyRolePermissionFilter

  """Some related `rolePermissionsConnection` exist."""
  rolePermissionsConnectionExist: Boolean

  """Filter by the object’s `userRolesConnection` relation."""
  userRolesConnection: RoleToManyUserRoleFilter

  """Some related `userRolesConnection` exist."""
  userRolesConnectionExist: Boolean
}

"""Grouping methods for `Role` for usage during aggregation."""
enum RoleGroupBy {
  NAME
}

input RoleHavingAverageInput {
  id: HavingIntFilter
}

input RoleHavingDistinctCountInput {
  id: HavingIntFilter
}

"""Conditions for `Role` aggregates."""
input RoleHavingInput {
  AND: [RoleHavingInput!]
  OR: [RoleHavingInput!]
  average: RoleHavingAverageInput
  distinctCount: RoleHavingDistinctCountInput
  max: RoleHavingMaxInput
  min: RoleHavingMinInput
  stddevPopulation: RoleHavingStddevPopulationInput
  stddevSample: RoleHavingStddevSampleInput
  sum: RoleHavingSumInput
  variancePopulation: RoleHavingVariancePopulationInput
  varianceSample: RoleHavingVarianceSampleInput
}

input RoleHavingMaxInput {
  id: HavingIntFilter
}

input RoleHavingMinInput {
  id: HavingIntFilter
}

input RoleHavingStddevPopulationInput {
  id: HavingIntFilter
}

input RoleHavingStddevSampleInput {
  id: HavingIntFilter
}

input RoleHavingSumInput {
  id: HavingIntFilter
}

input RoleHavingVariancePopulationInput {
  id: HavingIntFilter
}

input RoleHavingVarianceSampleInput {
  id: HavingIntFilter
}

type RoleMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int
}

type RoleMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int
}

type RolePermission implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Permission` that is related to this `RolePermission`."""
  permission: Permission
  permissionId: Int!

  """Reads a single `Role` that is related to this `RolePermission`."""
  role: Role
  roleId: Int!
}

type RolePermissionAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: RolePermissionAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: RolePermissionDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: RolePermissionMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: RolePermissionMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: RolePermissionStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: RolePermissionStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: RolePermissionSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: RolePermissionVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: RolePermissionVarianceSampleAggregates
}

"""
A filter to be used against aggregates of `RolePermission` object types.
"""
input RolePermissionAggregatesFilter {
  """Mean average aggregate over matching `RolePermission` objects."""
  average: RolePermissionAverageAggregateFilter

  """Distinct count aggregate over matching `RolePermission` objects."""
  distinctCount: RolePermissionDistinctCountAggregateFilter

  """
  A filter that must pass for the relevant `RolePermission` object to be included within the aggregate.
  """
  filter: RolePermissionFilter

  """Maximum aggregate over matching `RolePermission` objects."""
  max: RolePermissionMaxAggregateFilter

  """Minimum aggregate over matching `RolePermission` objects."""
  min: RolePermissionMinAggregateFilter

  """
  Population standard deviation aggregate over matching `RolePermission` objects.
  """
  stddevPopulation: RolePermissionStddevPopulationAggregateFilter

  """
  Sample standard deviation aggregate over matching `RolePermission` objects.
  """
  stddevSample: RolePermissionStddevSampleAggregateFilter

  """Sum aggregate over matching `RolePermission` objects."""
  sum: RolePermissionSumAggregateFilter

  """Population variance aggregate over matching `RolePermission` objects."""
  variancePopulation: RolePermissionVariancePopulationAggregateFilter

  """Sample variance aggregate over matching `RolePermission` objects."""
  varianceSample: RolePermissionVarianceSampleAggregateFilter
}

input RolePermissionAverageAggregateFilter {
  id: BigFloatFilter
  permissionId: BigFloatFilter
  roleId: BigFloatFilter
}

type RolePermissionAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of permissionId across the matching connection"""
  permissionId: BigFloat

  """Mean average of roleId across the matching connection"""
  roleId: BigFloat
}

"""
A condition to be used against `RolePermission` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RolePermissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `permissionId` field."""
  permissionId: Int

  """Checks for equality with the object’s `roleId` field."""
  roleId: Int
}

input RolePermissionDistinctCountAggregateFilter {
  id: BigIntFilter
  permissionId: BigIntFilter
  roleId: BigIntFilter
}

type RolePermissionDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of permissionId across the matching connection"""
  permissionId: BigInt

  """Distinct count of roleId across the matching connection"""
  roleId: BigInt
}

"""
A filter to be used against `RolePermission` object types. All fields are combined with a logical ‘and.’
"""
input RolePermissionFilter {
  """Checks for all expressions in this list."""
  and: [RolePermissionFilter!]

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: RolePermissionFilter

  """Checks for any expressions in this list."""
  or: [RolePermissionFilter!]

  """Filter by the object’s `permission` relation."""
  permission: PermissionFilter

  """Filter by the object’s `permissionId` field."""
  permissionId: IntFilter

  """Filter by the object’s `role` relation."""
  role: RoleFilter

  """Filter by the object’s `roleId` field."""
  roleId: IntFilter
}

"""Grouping methods for `RolePermission` for usage during aggregation."""
enum RolePermissionGroupBy {
  PERMISSION_ID
  ROLE_ID
}

input RolePermissionHavingAverageInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingDistinctCountInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

"""Conditions for `RolePermission` aggregates."""
input RolePermissionHavingInput {
  AND: [RolePermissionHavingInput!]
  OR: [RolePermissionHavingInput!]
  average: RolePermissionHavingAverageInput
  distinctCount: RolePermissionHavingDistinctCountInput
  max: RolePermissionHavingMaxInput
  min: RolePermissionHavingMinInput
  stddevPopulation: RolePermissionHavingStddevPopulationInput
  stddevSample: RolePermissionHavingStddevSampleInput
  sum: RolePermissionHavingSumInput
  variancePopulation: RolePermissionHavingVariancePopulationInput
  varianceSample: RolePermissionHavingVarianceSampleInput
}

input RolePermissionHavingMaxInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingMinInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingStddevPopulationInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingStddevSampleInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingSumInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingVariancePopulationInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionHavingVarianceSampleInput {
  id: HavingIntFilter
  permissionId: HavingIntFilter
  roleId: HavingIntFilter
}

input RolePermissionMaxAggregateFilter {
  id: IntFilter
  permissionId: IntFilter
  roleId: IntFilter
}

type RolePermissionMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int

  """Maximum of permissionId across the matching connection"""
  permissionId: Int

  """Maximum of roleId across the matching connection"""
  roleId: Int
}

input RolePermissionMinAggregateFilter {
  id: IntFilter
  permissionId: IntFilter
  roleId: IntFilter
}

type RolePermissionMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int

  """Minimum of permissionId across the matching connection"""
  permissionId: Int

  """Minimum of roleId across the matching connection"""
  roleId: Int
}

input RolePermissionStddevPopulationAggregateFilter {
  id: BigFloatFilter
  permissionId: BigFloatFilter
  roleId: BigFloatFilter
}

type RolePermissionStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """
  Population standard deviation of permissionId across the matching connection
  """
  permissionId: BigFloat

  """Population standard deviation of roleId across the matching connection"""
  roleId: BigFloat
}

input RolePermissionStddevSampleAggregateFilter {
  id: BigFloatFilter
  permissionId: BigFloatFilter
  roleId: BigFloatFilter
}

type RolePermissionStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """
  Sample standard deviation of permissionId across the matching connection
  """
  permissionId: BigFloat

  """Sample standard deviation of roleId across the matching connection"""
  roleId: BigFloat
}

input RolePermissionSumAggregateFilter {
  id: BigIntFilter
  permissionId: BigIntFilter
  roleId: BigIntFilter
}

type RolePermissionSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!

  """Sum of permissionId across the matching connection"""
  permissionId: BigInt!

  """Sum of roleId across the matching connection"""
  roleId: BigInt!
}

input RolePermissionVariancePopulationAggregateFilter {
  id: BigFloatFilter
  permissionId: BigFloatFilter
  roleId: BigFloatFilter
}

type RolePermissionVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of permissionId across the matching connection"""
  permissionId: BigFloat

  """Population variance of roleId across the matching connection"""
  roleId: BigFloat
}

input RolePermissionVarianceSampleAggregateFilter {
  id: BigFloatFilter
  permissionId: BigFloatFilter
  roleId: BigFloatFilter
}

type RolePermissionVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of permissionId across the matching connection"""
  permissionId: BigFloat

  """Sample variance of roleId across the matching connection"""
  roleId: BigFloat
}

"""A connection to a list of `RolePermission` values."""
type RolePermissionsConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: RolePermissionAggregates

  """
  A list of edges which contains the `RolePermission` and cursor to aid in pagination.
  """
  edges: [RolePermissionsEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `RolePermission` for these aggregates."""
    groupBy: [RolePermissionGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: RolePermissionHavingInput
  ): [RolePermissionAggregates!]

  """A list of `RolePermission` objects."""
  nodes: [RolePermission]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RolePermission` you could get from the connection."""
  totalCount: Int!
}

"""A `RolePermission` edge in the connection."""
type RolePermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RolePermission` at the end of the edge."""
  node: RolePermission
}

"""Methods to use when ordering `RolePermission`."""
enum RolePermissionsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PERMISSION_ID_ASC
  PERMISSION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
}

type RoleStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat
}

type RoleStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat
}

type RoleSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!
}

"""
A filter to be used against many `RolePermission` object types. All fields are combined with a logical ‘and.’
"""
input RoleToManyRolePermissionFilter {
  """Aggregates across related `RolePermission` match the filter criteria."""
  aggregates: RolePermissionAggregatesFilter

  """
  Every related `RolePermission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RolePermissionFilter

  """
  No related `RolePermission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RolePermissionFilter

  """
  Some related `RolePermission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RolePermissionFilter
}

"""
A filter to be used against many `UserRole` object types. All fields are combined with a logical ‘and.’
"""
input RoleToManyUserRoleFilter {
  """Aggregates across related `UserRole` match the filter criteria."""
  aggregates: UserRoleAggregatesFilter

  """
  Every related `UserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserRoleFilter

  """
  No related `UserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserRoleFilter

  """
  Some related `UserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserRoleFilter
}

type RoleVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat
}

type RoleVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat
}

"""A connection to a list of `Role` values."""
type RolesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: RoleAggregates

  """
  A list of edges which contains the `Role` and cursor to aid in pagination.
  """
  edges: [RolesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Role` for these aggregates."""
    groupBy: [RoleGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: RoleHavingInput
  ): [RoleAggregates!]

  """A list of `Role` objects."""
  nodes: [Role]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Role` you could get from the connection."""
  totalCount: Int!
}

"""A `Role` edge in the connection."""
type RolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Role` at the end of the edge."""
  node: Role
}

"""Methods to use when ordering `Role`."""
enum RolesOrderBy {
  CODE_ASC
  CODE_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_AVERAGE_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_COUNT_ASC
  ROLE_PERMISSIONS_CONNECTION_COUNT_DESC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_DISTINCT_COUNT_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MAX_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MAX_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MAX_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MAX_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MAX_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MAX_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MIN_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MIN_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MIN_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MIN_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_MIN_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_MIN_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_POPULATION_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_STDDEV_SAMPLE_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_SUM_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_SUM_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_SUM_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_SUM_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_SUM_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_SUM_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_POPULATION_ROLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_PERMISSION_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_PERMISSION_ID_DESC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_ASC
  ROLE_PERMISSIONS_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_AVERAGE_ID_ASC
  USER_ROLES_CONNECTION_AVERAGE_ID_DESC
  USER_ROLES_CONNECTION_AVERAGE_ROLE_ID_ASC
  USER_ROLES_CONNECTION_AVERAGE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_AVERAGE_USER_ID_ASC
  USER_ROLES_CONNECTION_AVERAGE_USER_ID_DESC
  USER_ROLES_CONNECTION_COUNT_ASC
  USER_ROLES_CONNECTION_COUNT_DESC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ID_ASC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ID_DESC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ROLE_ID_ASC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ROLE_ID_DESC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_USER_ID_ASC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_USER_ID_DESC
  USER_ROLES_CONNECTION_MAX_ID_ASC
  USER_ROLES_CONNECTION_MAX_ID_DESC
  USER_ROLES_CONNECTION_MAX_ROLE_ID_ASC
  USER_ROLES_CONNECTION_MAX_ROLE_ID_DESC
  USER_ROLES_CONNECTION_MAX_USER_ID_ASC
  USER_ROLES_CONNECTION_MAX_USER_ID_DESC
  USER_ROLES_CONNECTION_MIN_ID_ASC
  USER_ROLES_CONNECTION_MIN_ID_DESC
  USER_ROLES_CONNECTION_MIN_ROLE_ID_ASC
  USER_ROLES_CONNECTION_MIN_ROLE_ID_DESC
  USER_ROLES_CONNECTION_MIN_USER_ID_ASC
  USER_ROLES_CONNECTION_MIN_USER_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ROLE_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ROLE_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_USER_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_USER_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ROLE_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_USER_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_USER_ID_DESC
  USER_ROLES_CONNECTION_SUM_ID_ASC
  USER_ROLES_CONNECTION_SUM_ID_DESC
  USER_ROLES_CONNECTION_SUM_ROLE_ID_ASC
  USER_ROLES_CONNECTION_SUM_ROLE_ID_DESC
  USER_ROLES_CONNECTION_SUM_USER_ID_ASC
  USER_ROLES_CONNECTION_SUM_USER_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ROLE_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ROLE_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_USER_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_USER_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_USER_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_USER_ID_DESC
}

type SentCodeEntity {
  """User phone"""
  phone: String!

  """Status of sending"""
  status: Boolean!
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

type Subscription {
  permissionChanged: UpdateRolePermissionSubscriptionType!
  userEmailHasChanged: UserType!
  userLoggedIn: UserType!
}

type TokenPairType {
  accessToken: String!
  refreshToken: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

input UpdateCommentInput {
  body: String!
  id: String!
}

input UpdateDocumentInput {
  description: String
  documentTemplateId: String
  fileId: String
  id: String!
  name: String
  projectId: String
}

input UpdateDocumentTemplateInput {
  description: String
  documentTypeId: String
  fileId: String
  id: String!
  name: String
}

input UpdateDocumentTypeInput {
  """The name of the context in which certain entities are accessed"""
  context: DocumentContextEntityTypeEnum!

  """Description of this type of document"""
  description: String!
  id: String!

  """The name of this type of document"""
  name: String!
}

input UpdatePasswordInput {
  email: String!
  pwd: String!
  requestId: String!
}

input UpdateRolePermissionInput {
  enabled: Boolean!
  permissionIds: [Int!]!
  roleCode: RoleCodesEnum!
}

type UpdateRolePermissionSubscriptionType {
  enabled: Boolean!
  initiatorId: String!
  permissions: [Permission!]!
  roleId: Int!
}

input UpdateUserInput {
  comment: String
  email: String
  firstName: String
  gender: UserGenderEnum
  id: String!
  lastName: String
  login: String
  middleName: String
  phone: String
  roleIds: [Int!]

  """User status"""
  status: UserStatusEnum
  telegramId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  """Reads and enables pagination through a set of `Comment`."""
  authoredComments(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!]
  ): [Comment!]!

  """Reads and enables pagination through a set of `Comment`."""
  authoredCommentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsConnection!
  comment: String
  created: Datetime!
  email: String!
  firstName: String!
  gender: String!
  id: UUID!
  lastLogin: Datetime
  lastName: String!
  login: String!
  middleName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  passwordSetByUser: Boolean!
  phone: String
  pic: String

  """Reads and enables pagination through a set of `Role`."""
  roles(
    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Role]

  """Reads and enables pagination through a set of `Role`."""
  rolesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RolesConnection!
  status: String!
  telegramId: String
  updated: Datetime

  """Reads and enables pagination through a set of `UserRole`."""
  userRoles(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserRole`."""
    orderBy: [UserRolesOrderBy!]
  ): [UserRole!]!

  """Reads and enables pagination through a set of `UserRole`."""
  userRolesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserRole`."""
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRolesConnection!
}

type UserAggregates {
  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: UserDistinctCountAggregates
  keys: [String!]
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `gender` field."""
  gender: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `lastLogin` field."""
  lastLogin: Datetime

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `login` field."""
  login: String

  """Checks for equality with the object’s `middleName` field."""
  middleName: String

  """Checks for equality with the object’s `passwordSetByUser` field."""
  passwordSetByUser: Boolean

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `pic` field."""
  pic: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `telegramId` field."""
  telegramId: String

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
}

type UserDistinctCountAggregates {
  """Distinct count of comment across the matching connection"""
  comment: BigInt

  """Distinct count of created across the matching connection"""
  created: BigInt

  """Distinct count of email across the matching connection"""
  email: BigInt

  """Distinct count of firstName across the matching connection"""
  firstName: BigInt

  """Distinct count of gender across the matching connection"""
  gender: BigInt

  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of lastLogin across the matching connection"""
  lastLogin: BigInt

  """Distinct count of lastName across the matching connection"""
  lastName: BigInt

  """Distinct count of login across the matching connection"""
  login: BigInt

  """Distinct count of middleName across the matching connection"""
  middleName: BigInt

  """Distinct count of passwordSetByUser across the matching connection"""
  passwordSetByUser: BigInt

  """Distinct count of phone across the matching connection"""
  phone: BigInt

  """Distinct count of pic across the matching connection"""
  pic: BigInt

  """Distinct count of pwd across the matching connection"""
  pwd: BigInt

  """Distinct count of salt across the matching connection"""
  salt: BigInt

  """Distinct count of status across the matching connection"""
  status: BigInt

  """Distinct count of telegramId across the matching connection"""
  telegramId: BigInt

  """Distinct count of updated across the matching connection"""
  updated: BigInt
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `authoredCommentsConnection` relation."""
  authoredCommentsConnection: UserToManyCommentFilter

  """Some related `authoredCommentsConnection` exist."""
  authoredCommentsConnectionExist: Boolean

  """Filter by the object’s `comment` field."""
  comment: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `gender` field."""
  gender: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `lastLogin` field."""
  lastLogin: DatetimeFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `login` field."""
  login: StringFilter

  """Filter by the object’s `middleName` field."""
  middleName: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `passwordSetByUser` field."""
  passwordSetByUser: BooleanFilter

  """Filter by the object’s `phone` field."""
  phone: StringFilter

  """Filter by the object’s `pic` field."""
  pic: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `telegramId` field."""
  telegramId: StringFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `userRolesConnection` relation."""
  userRolesConnection: UserToManyUserRoleFilter

  """Some related `userRolesConnection` exist."""
  userRolesConnectionExist: Boolean
}

enum UserGenderEnum {
  female
  male
}

"""Grouping methods for `User` for usage during aggregation."""
enum UserGroupBy {
  COMMENT
  CREATED
  CREATED_TRUNCATED_TO_DAY
  CREATED_TRUNCATED_TO_HOUR
  FIRST_NAME
  GENDER
  LAST_LOGIN
  LAST_LOGIN_TRUNCATED_TO_DAY
  LAST_LOGIN_TRUNCATED_TO_HOUR
  LAST_NAME
  MIDDLE_NAME
  PASSWORD_SET_BY_USER
  PHONE
  PIC
  STATUS
  TELEGRAM_ID
  UPDATED
  UPDATED_TRUNCATED_TO_DAY
  UPDATED_TRUNCATED_TO_HOUR
}

input UserHavingAverageInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingDistinctCountInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

"""Conditions for `User` aggregates."""
input UserHavingInput {
  AND: [UserHavingInput!]
  OR: [UserHavingInput!]
  average: UserHavingAverageInput
  distinctCount: UserHavingDistinctCountInput
  max: UserHavingMaxInput
  min: UserHavingMinInput
  stddevPopulation: UserHavingStddevPopulationInput
  stddevSample: UserHavingStddevSampleInput
  sum: UserHavingSumInput
  variancePopulation: UserHavingVariancePopulationInput
  varianceSample: UserHavingVarianceSampleInput
}

input UserHavingMaxInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingMinInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingStddevPopulationInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingStddevSampleInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingSumInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingVariancePopulationInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserHavingVarianceSampleInput {
  created: HavingDatetimeFilter
  lastLogin: HavingDatetimeFilter
  updated: HavingDatetimeFilter
}

input UserLoginByPhoneInput {
  code: String!
  deviceId: String
  phone: String!
}

input UserLoginInput {
  deviceId: String
  email: String!
  password: String!
}

input UserLoginSendCodeInput {
  phone: String!
}

type UserRole implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Role` that is related to this `UserRole`."""
  role: Role
  roleId: Int!

  """Reads a single `User` that is related to this `UserRole`."""
  user: User
  userId: UUID!
}

type UserRoleAggregates {
  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: UserRoleAverageAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: UserRoleDistinctCountAggregates
  keys: [String!]

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: UserRoleMaxAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: UserRoleMinAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: UserRoleStddevPopulationAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: UserRoleStddevSampleAggregates

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: UserRoleSumAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: UserRoleVariancePopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: UserRoleVarianceSampleAggregates
}

"""A filter to be used against aggregates of `UserRole` object types."""
input UserRoleAggregatesFilter {
  """Mean average aggregate over matching `UserRole` objects."""
  average: UserRoleAverageAggregateFilter

  """Distinct count aggregate over matching `UserRole` objects."""
  distinctCount: UserRoleDistinctCountAggregateFilter

  """
  A filter that must pass for the relevant `UserRole` object to be included within the aggregate.
  """
  filter: UserRoleFilter

  """Maximum aggregate over matching `UserRole` objects."""
  max: UserRoleMaxAggregateFilter

  """Minimum aggregate over matching `UserRole` objects."""
  min: UserRoleMinAggregateFilter

  """
  Population standard deviation aggregate over matching `UserRole` objects.
  """
  stddevPopulation: UserRoleStddevPopulationAggregateFilter

  """Sample standard deviation aggregate over matching `UserRole` objects."""
  stddevSample: UserRoleStddevSampleAggregateFilter

  """Sum aggregate over matching `UserRole` objects."""
  sum: UserRoleSumAggregateFilter

  """Population variance aggregate over matching `UserRole` objects."""
  variancePopulation: UserRoleVariancePopulationAggregateFilter

  """Sample variance aggregate over matching `UserRole` objects."""
  varianceSample: UserRoleVarianceSampleAggregateFilter
}

input UserRoleAverageAggregateFilter {
  id: BigFloatFilter
  roleId: BigFloatFilter
}

type UserRoleAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of roleId across the matching connection"""
  roleId: BigFloat
}

"""
A condition to be used against `UserRole` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserRoleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `roleId` field."""
  roleId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

input UserRoleDistinctCountAggregateFilter {
  id: BigIntFilter
  roleId: BigIntFilter
  userId: BigIntFilter
}

type UserRoleDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of roleId across the matching connection"""
  roleId: BigInt

  """Distinct count of userId across the matching connection"""
  userId: BigInt
}

"""
A filter to be used against `UserRole` object types. All fields are combined with a logical ‘and.’
"""
input UserRoleFilter {
  """Checks for all expressions in this list."""
  and: [UserRoleFilter!]

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: UserRoleFilter

  """Checks for any expressions in this list."""
  or: [UserRoleFilter!]

  """Filter by the object’s `role` relation."""
  role: RoleFilter

  """Filter by the object’s `roleId` field."""
  roleId: IntFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""Grouping methods for `UserRole` for usage during aggregation."""
enum UserRoleGroupBy {
  ROLE_ID
  USER_ID
}

input UserRoleHavingAverageInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingDistinctCountInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

"""Conditions for `UserRole` aggregates."""
input UserRoleHavingInput {
  AND: [UserRoleHavingInput!]
  OR: [UserRoleHavingInput!]
  average: UserRoleHavingAverageInput
  distinctCount: UserRoleHavingDistinctCountInput
  max: UserRoleHavingMaxInput
  min: UserRoleHavingMinInput
  stddevPopulation: UserRoleHavingStddevPopulationInput
  stddevSample: UserRoleHavingStddevSampleInput
  sum: UserRoleHavingSumInput
  variancePopulation: UserRoleHavingVariancePopulationInput
  varianceSample: UserRoleHavingVarianceSampleInput
}

input UserRoleHavingMaxInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingMinInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingStddevPopulationInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingStddevSampleInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingSumInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingVariancePopulationInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleHavingVarianceSampleInput {
  id: HavingIntFilter
  roleId: HavingIntFilter
}

input UserRoleMaxAggregateFilter {
  id: IntFilter
  roleId: IntFilter
}

type UserRoleMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int

  """Maximum of roleId across the matching connection"""
  roleId: Int
}

input UserRoleMinAggregateFilter {
  id: IntFilter
  roleId: IntFilter
}

type UserRoleMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int

  """Minimum of roleId across the matching connection"""
  roleId: Int
}

input UserRoleStddevPopulationAggregateFilter {
  id: BigFloatFilter
  roleId: BigFloatFilter
}

type UserRoleStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """Population standard deviation of roleId across the matching connection"""
  roleId: BigFloat
}

input UserRoleStddevSampleAggregateFilter {
  id: BigFloatFilter
  roleId: BigFloatFilter
}

type UserRoleStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """Sample standard deviation of roleId across the matching connection"""
  roleId: BigFloat
}

input UserRoleSumAggregateFilter {
  id: BigIntFilter
  roleId: BigIntFilter
}

type UserRoleSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!

  """Sum of roleId across the matching connection"""
  roleId: BigInt!
}

input UserRoleVariancePopulationAggregateFilter {
  id: BigFloatFilter
  roleId: BigFloatFilter
}

type UserRoleVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of roleId across the matching connection"""
  roleId: BigFloat
}

input UserRoleVarianceSampleAggregateFilter {
  id: BigFloatFilter
  roleId: BigFloatFilter
}

type UserRoleVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of roleId across the matching connection"""
  roleId: BigFloat
}

"""A connection to a list of `UserRole` values."""
type UserRolesConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: UserRoleAggregates

  """
  A list of edges which contains the `UserRole` and cursor to aid in pagination.
  """
  edges: [UserRolesEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `UserRole` for these aggregates."""
    groupBy: [UserRoleGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: UserRoleHavingInput
  ): [UserRoleAggregates!]

  """A list of `UserRole` objects."""
  nodes: [UserRole]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserRole` you could get from the connection."""
  totalCount: Int!
}

"""A `UserRole` edge in the connection."""
type UserRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserRole` at the end of the edge."""
  node: UserRole
}

"""Methods to use when ordering `UserRole`."""
enum UserRolesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum UserStatusEnum {
  active
  deleted
  new
}

"""
A filter to be used against many `Comment` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyCommentFilter {
  """Aggregates across related `Comment` match the filter criteria."""
  aggregates: CommentAggregatesFilter

  """
  Every related `Comment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommentFilter

  """
  No related `Comment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommentFilter

  """
  Some related `Comment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommentFilter
}

"""
A filter to be used against many `UserRole` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserRoleFilter {
  """Aggregates across related `UserRole` match the filter criteria."""
  aggregates: UserRoleAggregatesFilter

  """
  Every related `UserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserRoleFilter

  """
  No related `UserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserRoleFilter

  """
  Some related `UserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserRoleFilter
}

type UserType {
  """Color of avatar, RGB"""
  color: String!

  """User comment"""
  comment: String

  """User created timestamp"""
  created: String!

  """User email"""
  email: String!

  """User first name"""
  firstName: String!
  gender: UserGenderEnum!

  """User id"""
  id: String!

  """User last name"""
  lastName: String!

  """Level of Avatar"""
  level: Float!

  """The name of avatar"""
  login: String

  """User middle name"""
  middleName: String

  """true if the password was set by user"""
  passwordSetByUser: Boolean!

  """User phone"""
  phone: String!

  """User roles"""
  roles: [Role!]!

  """User status"""
  status: UserStatusEnum!
  telegramId: String

  """User updated timestamp"""
  updated: String!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: UserAggregates

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `User` for these aggregates."""
    groupBy: [UserGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: UserHavingInput
  ): [UserAggregates!]

  """A list of `User` objects."""
  nodes: [User]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_AVERAGE_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_COUNT_ASC
  AUTHORED_COMMENTS_CONNECTION_COUNT_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_DISTINCT_COUNT_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MAX_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_MAX_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_MIN_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_MIN_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_POPULATION_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_STDDEV_SAMPLE_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_SUM_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_SUM_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_POPULATION_UPDATED_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_AUTHOR_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_AUTHOR_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_BODY_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_BODY_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_CREATED_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_CREATED_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_TYPE_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ENTITY_TYPE_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_PARENT_ID_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_PARENT_ID_DESC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_UPDATED_ASC
  AUTHORED_COMMENTS_CONNECTION_VARIANCE_SAMPLE_UPDATED_DESC
  COMMENT_ASC
  COMMENT_DESC
  CREATED_ASC
  CREATED_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_LOGIN_ASC
  LAST_LOGIN_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  LOGIN_ASC
  LOGIN_DESC
  MIDDLE_NAME_ASC
  MIDDLE_NAME_DESC
  NATURAL
  PASSWORD_SET_BY_USER_ASC
  PASSWORD_SET_BY_USER_DESC
  PHONE_ASC
  PHONE_DESC
  PIC_ASC
  PIC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  TELEGRAM_ID_ASC
  TELEGRAM_ID_DESC
  UPDATED_ASC
  UPDATED_DESC
  USER_ROLES_CONNECTION_AVERAGE_ID_ASC
  USER_ROLES_CONNECTION_AVERAGE_ID_DESC
  USER_ROLES_CONNECTION_AVERAGE_ROLE_ID_ASC
  USER_ROLES_CONNECTION_AVERAGE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_AVERAGE_USER_ID_ASC
  USER_ROLES_CONNECTION_AVERAGE_USER_ID_DESC
  USER_ROLES_CONNECTION_COUNT_ASC
  USER_ROLES_CONNECTION_COUNT_DESC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ID_ASC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ID_DESC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ROLE_ID_ASC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_ROLE_ID_DESC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_USER_ID_ASC
  USER_ROLES_CONNECTION_DISTINCT_COUNT_USER_ID_DESC
  USER_ROLES_CONNECTION_MAX_ID_ASC
  USER_ROLES_CONNECTION_MAX_ID_DESC
  USER_ROLES_CONNECTION_MAX_ROLE_ID_ASC
  USER_ROLES_CONNECTION_MAX_ROLE_ID_DESC
  USER_ROLES_CONNECTION_MAX_USER_ID_ASC
  USER_ROLES_CONNECTION_MAX_USER_ID_DESC
  USER_ROLES_CONNECTION_MIN_ID_ASC
  USER_ROLES_CONNECTION_MIN_ID_DESC
  USER_ROLES_CONNECTION_MIN_ROLE_ID_ASC
  USER_ROLES_CONNECTION_MIN_ROLE_ID_DESC
  USER_ROLES_CONNECTION_MIN_USER_ID_ASC
  USER_ROLES_CONNECTION_MIN_USER_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ROLE_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_ROLE_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_USER_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_POPULATION_USER_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ROLE_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_USER_ID_ASC
  USER_ROLES_CONNECTION_STDDEV_SAMPLE_USER_ID_DESC
  USER_ROLES_CONNECTION_SUM_ID_ASC
  USER_ROLES_CONNECTION_SUM_ID_DESC
  USER_ROLES_CONNECTION_SUM_ROLE_ID_ASC
  USER_ROLES_CONNECTION_SUM_ROLE_ID_DESC
  USER_ROLES_CONNECTION_SUM_USER_ID_ASC
  USER_ROLES_CONNECTION_SUM_USER_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ROLE_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_ROLE_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_USER_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_POPULATION_USER_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_ROLE_ID_DESC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_USER_ID_ASC
  USER_ROLES_CONNECTION_VARIANCE_SAMPLE_USER_ID_DESC
}
